{"version":3,"sources":["Utils/api.js","Utils/loginAPI.js","Utils/websiteAPI.js","Utils/registrarAPI.js","Utils/hostAPI.js","Websites/WebsiteListItem.js","Websites/SelectRegistrarItem.js","Websites/SelectHostItem.js","General/TextInput.js","Websites/EditWebsiteForm.js","General/CopyableText.js","Registrars/EditRegistrarForm.js","General/BackButton.js","General/Title.js","Registrars/RegistrarTitle.js","Registrars/RegistrarInfo.js","Hosts/EditHostForm.js","Hosts/HostTitle.js","Hosts/HostInfo.js","Websites/WebsiteInfo.js","Websites/AddWebsiteForm.js","General/Search.js","Websites/WebsiteList.js","Registrars/RegistrarListItem.js","Registrars/AddRegistrarForm.js","Registrars/RegistrarList.js","Hosts/HostListItem.js","Hosts/AddHostForm.js","Hosts/HostList.js","General/LoginForm.js","General/RegisterForm.js","General/MaiHeader.js","General/HomeButton.js","General/LogOutButton.js","App.js","serviceWorker.js","index.js"],"names":["loginAPI","require","websiteAPI","registrarAPI","hostAPI","exports","login","checkLogin","logout","registerUser","checkRegisteredUsers","getWebsites","getWebsite","searchWebsites","createWebsite","updateWebsite","removeWebsite","getRegistrars","searchRegistrars","createRegistrar","updateRegistrar","removeRegistrar","getHosts","searchHosts","createHost","updateHost","removeHost","module","USER_URL","process","REACT_APP_BACKEND_URL","LOGIN_URL","LOGOUT_URL","REGISTER_URL","_x","_login","apply","this","arguments","_callee","user","C_Users_AlexJ_workspace_Domain_Manager_domain_manager_domain_manager_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","abrupt","fetch","method","headers","Headers","Content-Type","body","JSON","stringify","credentials","then","resp","ok","status","json","data","errorMessage","message","stop","_checkLogin","_callee2","_context2","_logout","_callee3","_context3","_x2","_registerUser","_callee4","_context4","_checkRegisteredUsers","_callee5","_context5","WEBSITE_URL","_getWebsites","_getWebsite","id","getURL","_searchWebsites","query","_x3","_createWebsite","website","_x4","_updateWebsite","updateURL","_id","_x5","_removeWebsite","_callee6","deleteURL","_context6","REGISTRAR_URL","_getRegistrars","_searchRegistrars","_createRegistrar","registrar","_updateRegistrar","_removeRegistrar","HOST_URL","_getHosts","_searchHosts","_createHost","host","_updateHost","_removeHost","WebsiteListItem","_ref","name","url","onSelect","react_default","createElement","onClick","SelectRegistrarItem","value","SelectHostItem","TextInput","state","hasFocus","handleBlur","_this","setState","handleFocus","render","placeholder","props","type","onChange","onFocus","onBlur","Component","EditWebsiteForm","websiteName","ftp","userName","password","notes","handleChange","e","Object","defineProperty","target","handleSubmit","preventDefault","updatedWebsite","objectSpread","disableEditMode","registrars","map","r","Websites_SelectRegistrarItem","key","hosts","h","Websites_SelectHostItem","General_TextInput","className","rows","CopyableText","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","textArea","current","copyToClipboard","select","document","execCommand","focus","ref","readOnly","React","createRef","EditRegistrarForm","registrarName","updatedRegistrar","BackButton","Title","titleString","onBack","General_BackButton","RegistrarTitle","selectedWebsite","General_Title","goBack","RegistrarInfo","enableEditMode","enableViewWebsites","enableState","isEnabled","renderRegistrarInfo","Registrars_RegistrarTitle","General_CopyableText","disabled","websites","bind","assertThisInitialized","deleteRegistrar","renderRegistrarEdit","Registrars_EditRegistrarForm","renderRegistrarWebsites","Websites_WebsiteList","updateWebsites","selectedRegistrar","EditHostForm","hostName","updatedHost","HostTitle","HostInfo","renderHostInfo","Hosts_HostTitle","deleteHost","renderHostEdit","Hosts_EditHostForm","renderHostWebsites","selectedHost","WebsiteInfo","enableViewRegistrar","enableViewHost","renderWebsiteInfo","deleteWebsite","renderWebsiteEdit","Websites_EditWebsiteForm","Registrars_RegistrarInfo","Hosts_HostInfo","AddWebsiteForm","addWebsite","disableAddWebsite","Search","searchQuery","regenerator_default","search","clearSearch","style","display","apiCalls","WebsiteList","enableAddWebsite","selectWebsite","deselectWebsite","newWebsite","sent","concat","toConsumableArray","updatedSite","filter","w","matchingSites","allSites","renderWebsiteList","websiteListItems","Websites_WebsiteListItem","assign","General_Search","renderAddWebsite","Websites_AddWebsiteForm","Websites_WebsiteInfo","defaultProps","RegistrarListItem","AddRegistrarForm","addRegistrar","disableAddRegistrar","RegistrarList","enableAddRegistrar","newRegistrar","updateRegistrars","selectRegistrar","deselectRegistrar","updatedReg","matchingRegistrars","allRegistrars","renderRegistrarList","registrarListItems","Registrars_RegistrarListItem","renderAddRegistrar","Registrars_AddRegistrarForm","HostListItem","AddHostForm","addHost","disableAddHost","HostList","enableAddHost","newHost","updateHosts","selectHost","deselectHost","matchingHosts","allHosts","renderHostList","hostListItems","Hosts_HostListItem","renderAddHost","Hosts_AddHostForm","LoginForm","username","RegisterForm","MaiHeader","HomeButton","LogOutButton","App","currentView","loggedIn","componentWillMount","setView","t0","newUser","registeredUsers","count","foundUser","loadWebsites","_callee7","_context7","loadRegistrars","_callee8","_context8","loadHosts","_callee9","_context9","loadAll","_callee10","_context10","_callee11","view","_context11","_callee12","_context12","renderHomeView","General_HomeButton","General_LogOutButton","General_MaiHeader","renderLoginView","General_LoginForm","renderRegisterUserView","General_RegisterForm","renderWebsiteView","back","renderRegistrarView","Registrars_RegistrarList","renderHostView","Hosts_HostList","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32ae86f3.chunk.js","sourcesContent":["// --------------------------------------------------------------- //\r\n// -------- API functions for making calls to the backend -------- //\r\n// --------------------------------------------------------------- //\r\n\r\n// API functions are split into different files, for organization\r\nvar loginAPI = require('./loginAPI');\r\nvar websiteAPI = require('./websiteAPI');\r\nvar registrarAPI = require('./registrarAPI');\r\nvar hostAPI = require('./hostAPI');\r\n\r\n// --------------------------------------------------------------- //\r\n// --------------------------- LOGIN API ------------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.login = loginAPI.login;\r\nexports.checkLogin = loginAPI.checkLogin;\r\nexports.logout = loginAPI.logout;\r\nexports.registerUser = loginAPI.registerUser;\r\nexports.checkRegisteredUsers = loginAPI.checkRegisteredUsers;\r\n\r\n// --------------------------------------------------------------- //\r\n// --------------------------- Website API ----------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getWebsites = websiteAPI.getWebsites;\r\nexports.getWebsite = websiteAPI.getWebsite;\r\nexports.searchWebsites  = websiteAPI.searchWebsites;\r\nexports.createWebsite = websiteAPI.createWebsite;\r\nexports.updateWebsite = websiteAPI.updateWebsite;\r\nexports.removeWebsite = websiteAPI.removeWebsite;\r\n\r\n// --------------------------------------------------------------- //\r\n// -------------------------- Registrar API ---------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getRegistrars = registrarAPI.getRegistrars;\r\nexports.searchRegistrars = registrarAPI.searchRegistrars;\r\nexports.createRegistrar = registrarAPI.createRegistrar;\r\nexports.updateRegistrar = registrarAPI.updateRegistrar;\r\nexports.removeRegistrar = registrarAPI.removeRegistrar;\r\n\r\n// --------------------------------------------------------------- //\r\n// ----------------------------- Host API ------------------------ //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getHosts = hostAPI.getHosts;\r\nexports.searchHosts = hostAPI.searchHosts;\r\nexports.createHost = hostAPI.createHost;\r\nexports.updateHost = hostAPI.updateHost;\r\nexports.removeHost = hostAPI.removeHost;\r\n\r\nmodule.exports = exports;","// --------------------------------------------------------------- //\r\n// --------------------------- LOGIN API ------------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst USER_URL = BACKEND_URL + '/api/user/';\r\nconst LOGIN_URL = USER_URL + 'login';\r\nconst LOGOUT_URL = USER_URL + 'logout';\r\nconst REGISTER_URL = USER_URL + 'register'\r\n\r\n// Login user with given credentials\r\nexport async function login(user) {\r\n  return fetch(LOGIN_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(user),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\n// Checks to see if there is a current user session\r\nexport async function checkLogin() {\r\n  return fetch(LOGIN_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\n// Terminates current user session\r\nexport async function logout() {\r\n  return fetch(LOGOUT_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\n// Registers a new user\r\nexport async function registerUser(user) {\r\n  return fetch(REGISTER_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(user),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\n// Returns the number of registered users\r\nexport async function checkRegisteredUsers() {\r\n  return fetch(REGISTER_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}","// --------------------------------------------------------------- //\r\n// --------------------------- Website API ----------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst WEBSITE_URL = BACKEND_URL + '/api/websites/';\r\n\r\nexport async function getWebsites() {\r\n  return fetch(WEBSITE_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function getWebsite(id) {\r\n  const getURL = WEBSITE_URL + id;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function searchWebsites(query) {\r\n  const getURL = WEBSITE_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function createWebsite(website) {\r\n  return fetch(WEBSITE_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(website),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function updateWebsite(website) {\r\n  const updateURL = WEBSITE_URL + website._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(website),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function removeWebsite(id) {\r\n  const deleteURL = WEBSITE_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}","// --------------------------------------------------------------- //\r\n// -------------------------- Registrar API ---------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst REGISTRAR_URL = BACKEND_URL + '/api/registrars/';\r\n\r\nexport async function getRegistrars() {\r\n  return fetch(REGISTRAR_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function searchRegistrars(query) {\r\n  const getURL = REGISTRAR_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function createRegistrar(registrar) {\r\n  return fetch(REGISTRAR_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(registrar),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function updateRegistrar(registrar) {\r\n  const updateURL = REGISTRAR_URL + registrar._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(registrar),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function removeRegistrar(id) {\r\n  const deleteURL = REGISTRAR_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}","// --------------------------------------------------------------- //\r\n// ----------------------------- Host API ------------------------ //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst HOST_URL = BACKEND_URL + '/api/hosts/';\r\n\r\nexport async function getHosts() {\r\n  return fetch(HOST_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function searchHosts(query) {\r\n  const getURL = HOST_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexport async function createHost(host) {\r\n  return fetch(HOST_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(host),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function updateHost(host) {\r\n  const updateURL = HOST_URL + host._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(host),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexport async function removeHost(id) {\r\n  const deleteURL = HOST_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}","import React from 'react';\r\n\r\nconst WebsiteListItem = ({name, url, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n    <span>\r\n      <strong>{name}</strong>: {url}\r\n    </span>\r\n  </li>\r\n)\r\n\r\nexport default WebsiteListItem;","import React from 'react';\r\n\r\nconst SelectRegistrarItem = ({registrar}) => (\r\n  <option\r\n    value={registrar._id}\r\n  >\r\n    {registrar.name}\r\n  </option>\r\n)\r\n\r\nexport default SelectRegistrarItem;","import React from 'react';\r\n\r\nconst SelectHostItem = ({host}) => (\r\n  <option\r\n    value={host._id}\r\n  >\r\n    {host.name}\r\n  </option>\r\n)\r\n\r\nexport default SelectHostItem;","import React, {Component} from 'react';\r\n\r\nclass TextInput extends Component {\r\n\r\n  state = {\r\n    hasFocus: false\r\n  };\r\n\r\n  handleBlur = () => {\r\n    // The onBlur DOM event occurs when an object loses focus\r\n    this.setState({hasFocus: false});\r\n  }\r\n\r\n  handleFocus = () => {\r\n    // The onFocus DOM event occurs when an object has focus\r\n    this.setState({hasFocus: true});\r\n  }\r\n\r\n  render = () => {\r\n    var placeholder = this.props.placeholder;\r\n    if(this.props.value) {\r\n      // If value is passed as a prop, render placeholder and value, for example: \"User Name: Bilbo\" where\r\n      // placeholder is \"User Name\" and value is \"Bilbo\"\r\n      placeholder = placeholder + ': ' + this.props.value;\r\n    }\r\n    return (\r\n      <input \r\n        name={this.props.name}\r\n        type='text'\r\n        value={this.state.hasFocus? this.props.value : ''}\r\n        onChange={this.props.onChange}\r\n        placeholder={placeholder}\r\n        onFocus = {this.handleFocus}\r\n        onBlur= {this.handleBlur}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextInput;","import React, {Component} from 'react';\r\nimport SelectRegistrarItem from './SelectRegistrarItem';\r\nimport SelectHostItem from './SelectHostItem';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditWebsiteForm extends Component {\r\n\r\n  state = {\r\n    websiteName: this.props.website.name,\r\n    url: this.props.website.url,\r\n    ftp: this.props.website.ftp,\r\n    userName: this.props.website.userName,\r\n    password: this.props.website.password,\r\n    notes: this.props.website.notes,\r\n    registrar: this.props.website.registrar,\r\n    host: this.props.website.host\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.websiteName && this.state.url){\r\n      // Create updated website object\r\n      var updatedWebsite = {...this.props.website};\r\n      updatedWebsite.name = this.state.websiteName;\r\n      updatedWebsite.url = this.state.url;\r\n      updatedWebsite.ftp = this.state.ftp;\r\n      updatedWebsite.userName = this.state.userName;\r\n      updatedWebsite.password = this.state.password;\r\n      updatedWebsite.notes = this.state.notes;\r\n      updatedWebsite.registrar = this.state.registrar;\r\n      updatedWebsite.host = this.state.host;\r\n\r\n      // ObjectIDs cannot be empty strings, but they can be null\r\n      if(updatedWebsite.registrar === ''){updatedWebsite.registrar = null}\r\n      if(updatedWebsite.host === ''){updatedWebsite.host = null}\r\n\r\n      // Call updateWebsite(), which is passed from WebsiteList as a prop\r\n      this.props.updateWebsite(updatedWebsite);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const registrars = this.props.registrars.map((r) => (\r\n      <SelectRegistrarItem\r\n        key={r._id}\r\n        registrar={r}\r\n        id={r._id}\r\n      />\r\n    ));\r\n    const hosts = this.props.hosts.map((h) => (\r\n      <SelectHostItem\r\n        key={h._id}\r\n        host={h}\r\n        id={h._id}\r\n      />\r\n    ));\r\n    return (\r\n      <section id=\"websiteEditForm\">\r\n        <form id=\"websiteEditInput\">\r\n          <TextInput\r\n            name='websiteName'\r\n            value={this.state.websiteName}\r\n            onChange={this.handleChange}\r\n            placeholder='Website'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='url'\r\n            value={this.state.url}\r\n            onChange={this.handleChange}\r\n            placeholder='URL'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='ftp'\r\n            value={this.state.ftp}\r\n            onChange={this.handleChange}\r\n            placeholder='FTP'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"drop-downs\">\r\n            <div className=\"drop-down\">\r\n              <label>Registrar:</label>\r\n              <div className=\"drop-down-select\">\r\n                <select\r\n                  name='registrar'\r\n                  onChange={this.handleChange}\r\n                >\r\n                  {this.props.website.registrar ? \r\n                    <option value={this.props.website.registrar._id}>{this.props.website.registrar.name}</option>\r\n                  : <option value=''>----------None----------</option>\r\n                  }\r\n                  <option value=''>----------None----------</option>\r\n                  {registrars}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"drop-down\">\r\n              <label>Host:</label>\r\n              <div className=\"drop-down-select\">\r\n                <select\r\n                  name='host'\r\n                  onChange={this.handleChange}\r\n                >\r\n                  {this.props.website.host ? \r\n                    <option value={this.props.website.host._id}>{this.props.website.host.name}</option>\r\n                  : <option value=''>----------None----------</option>\r\n                  }\r\n                  <option value=''>----------None----------</option>\r\n                  {hosts}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Website</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditWebsiteForm;","import React, { Component } from 'react';\r\n\r\nclass CopyableText extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasFocus: false\r\n    };\r\n    this.textArea = React.createRef();\r\n  }\r\n\r\n  handleBlur = () => {\r\n    // The onBlur DOM event occurs when an object loses focus\r\n    this.setState({hasFocus: false});\r\n    this.textArea.current.value = this.props.value;\r\n  }\r\n\r\n  handleFocus = () => {\r\n    // The onFocus DOM event occurs when an object has focus\r\n    this.setState({hasFocus: true});\r\n  }\r\n\r\n  // Copies the input field's value to clipboard\r\n  copyToClipboard = (e) => {\r\n    this.textArea.current.select();\r\n    document.execCommand('copy');\r\n    e.target.focus();\r\n    this.textArea.current.value = 'Copied to Clipboard!';\r\n  }\r\n\r\n  render = () => {\r\n    return(\r\n      <input\r\n        ref={this.textArea}\r\n        //rows='1'\r\n        type='text'\r\n        value={this.props.value}\r\n        onClick={this.copyToClipboard}\r\n        onFocus={this.handleFocus}\r\n        onBlur={this.handleBlur}\r\n        readOnly\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\nexport default CopyableText;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditRegistrarForm extends Component {\r\n\r\n  state = {\r\n    registrarName: this.props.registrar.name,\r\n    userName: this.props.registrar.userName,\r\n    password: this.props.registrar.password,\r\n    notes: this.props.registrar.notes\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.registrarName) {\r\n      // Create updated registrar object\r\n      var updatedRegistrar = {...this.props.registrar};\r\n      updatedRegistrar.name = this.state.registrarName;\r\n      updatedRegistrar.userName = this.state.userName;\r\n      updatedRegistrar.password = this.state.password;\r\n      updatedRegistrar.notes = this.state.notes;\r\n\r\n      // Call updateRegistrar(), which is passed from RegistrarList as a prop\r\n      this.props.updateRegistrar(updatedRegistrar);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"registrarEditForm\">\r\n        <form id=\"registrarEditInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='registrarName'\r\n            value={this.state.registrarName}\r\n            onChange={this.handleChange}\r\n            placeholder='Registrar'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Registrar</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditRegistrarForm;","import React from 'react';\r\n\r\nconst BackButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"backButton\" className=\"fa fa-arrow-left fa-2x\"></i></div>\r\n)\r\n\r\nexport default BackButton;","import React from 'react';\r\nimport BackButton from './BackButton';\r\n\r\nconst Title = ({titleString, onBack}) => (\r\n  <div className = \"Title\">\r\n    <BackButton onClick={onBack}></BackButton>\r\n    <h2>{titleString}</h2>\r\n  </div>\r\n)\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport Title from '../General/Title';\r\n\r\nclass RegistrarTitle extends Component {\r\n\r\n  render = () => {\r\n    if(!this.props.selectedWebsite) {\r\n      return(\r\n        <Title titleString={\"Registrar: \" + this.props.registrarName} onBack={this.props.goBack}/>\r\n      )\r\n    }\r\n    return(\r\n      <h3>{this.props.registrarName}</h3>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegistrarTitle;","import React, { Component } from 'react';\r\nimport EditRegistrarForm from './EditRegistrarForm';\r\nimport WebsiteList from '../Websites/WebsiteList';\r\nimport CopyableText from '../General/CopyableText';\r\nimport RegistrarTitle from './RegistrarTitle';\r\nimport Title from '../General/Title';\r\n\r\n// Display registrar info. Rendered from RegistrarList and WebsiteInfo.\r\nclass RegistrarInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewWebsites: false\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  // selectedWebsite is passed from WebsiteInfo as a prop\r\n  // websites is passed from RegistrarList as a prop\r\n  renderRegistrarInfo = () => {\r\n    return(\r\n      <div id=\"registrarInfoDisplay\">\r\n        <RegistrarTitle\r\n          selectedWebsite={this.props.selectedWebsite ? true : false}\r\n          registrarName={this.props.registrar.name}\r\n          goBack={this.props.goBack}\r\n        />\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.registrar.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.registrar.password}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.registrar.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        {\r\n          this.props.websites ?\r\n            <div id='registrarButtons'>\r\n              <button onClick={this.enableState.bind(this, 'enableViewWebsites', true)}>Registered Websites</button>\r\n              <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Registrar</button>\r\n              <button onClick={this.props.deleteRegistrar}>Delete Registrar</button>\r\n            </div>\r\n          : ''\r\n        }\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarEdit = () => {\r\n    return (\r\n      <div id=\"registrarEdit\">\r\n        <Title titleString=\"Edit Registrar\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditRegistrarForm \r\n          registrar={this.props.registrar} \r\n          updateRegistrar={this.props.updateRegistrar} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarWebsites = () => {\r\n    return (\r\n      <WebsiteList \r\n        goBack={this.enableState.bind(this, 'enableViewWebsites', false)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        selectedRegistrar={this.props.registrar}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderRegistrarEdit();\r\n    }\r\n    if(this.state.enableViewWebsites){\r\n      return this.renderRegistrarWebsites();\r\n    }\r\n    return this.renderRegistrarInfo();\r\n  }\r\n}\r\n\r\nexport default RegistrarInfo;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditHostForm extends Component {\r\n\r\n  state = {\r\n    hostName: this.props.host.name,\r\n    userName: this.props.host.userName,\r\n    password: this.props.host.password,\r\n    notes: this.props.host.notes\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.hostName) {\r\n      // Create updated host object\r\n      var updatedHost = {...this.props.host};\r\n      updatedHost.name = this.state.hostName;\r\n      updatedHost.userName = this.state.userName;\r\n      updatedHost.password = this.state.password;\r\n      updatedHost.notes = this.state.notes;\r\n\r\n      // Call updateHost(), which is passed from HostList as a prop\r\n      this.props.updateHost(updatedHost);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"hostEditForm\">\r\n        <form id=\"hostEditInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='hostName'\r\n            value={this.state.hostName}\r\n            onChange={this.handleChange}\r\n            placeholder='Host'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Host</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditHostForm;","import React, { Component } from 'react';\r\nimport Title from '../General/Title';\r\n\r\nclass HostTitle extends Component {\r\n  render = () => {\r\n    if(!this.props.selectedWebsite) {\r\n      return(\r\n        <Title titleString={\"Host: \" + this.props.hostName} onBack={this.props.goBack}/>\r\n      )\r\n    }\r\n    return(\r\n      <h3>{this.props.hostName}</h3>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HostTitle;","import React, { Component } from 'react';\r\nimport EditHostForm from './EditHostForm';\r\nimport WebsiteList from '../Websites/WebsiteList';\r\nimport CopyableText from '../General/CopyableText';\r\nimport HostTitle from './HostTitle';\r\nimport Title from '../General/Title';\r\n\r\n// Display host info. Rendered from HostList and WebsiteInfo.\r\nclass HostInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewWebsites: false\r\n  };\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  // selectedWebsite is passed from WebsiteInfo as a prop\r\n  // websites is passed from HostList as a prop\r\n  renderHostInfo = () => {\r\n    return(\r\n      <div id=\"hostInfoDisplay\">\r\n        <HostTitle\r\n          selectedWebsite={this.props.selectedWebsite ? true : false}\r\n          hostName={this.props.host.name}\r\n          goBack={this.props.goBack}\r\n        />\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.host.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.host.password}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.host.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        {\r\n          this.props.websites ?\r\n            <div id='hostButtons'>\r\n              <button onClick={this.enableState.bind(this, 'enableViewWebsites', true)}>Hosted Websites</button>\r\n              <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Host</button>\r\n              <button onClick={this.props.deleteHost}>Delete Host</button>\r\n            </div>\r\n          : ''\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostEdit = () => {\r\n    return (\r\n      <div id=\"hostEdit\">\r\n        <Title titleString=\"Edit Host\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditHostForm \r\n          host={this.props.host} \r\n          updateHost={this.props.updateHost} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostWebsites = () => {\r\n    return (\r\n      <WebsiteList \r\n        goBack={this.enableState.bind(this, 'enableViewWebsites', false)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        selectedHost={this.props.host}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderHostEdit();\r\n    }\r\n    if(this.state.enableViewWebsites){\r\n      return this.renderHostWebsites();\r\n    }\r\n    return this.renderHostInfo();\r\n  }\r\n}\r\n\r\nexport default HostInfo;","import React, { Component } from 'react';\r\nimport EditWebsiteForm from './EditWebsiteForm';\r\nimport CopyableText from '../General/CopyableText';\r\nimport RegistrarInfo from '../Registrars/RegistrarInfo';\r\nimport HostInfo from '../Hosts/HostInfo';\r\nimport Title from '../General/Title';\r\n\r\nclass WebsiteInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewRegistrar: false,\r\n    enableViewHost: false\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  renderWebsiteInfo = () => {\r\n    let titleString = \"Website: \" + this.props.website.name;\r\n    return (\r\n      <div id=\"websiteInfoDisplay\">\r\n        <Title  titleString={titleString} onBack={this.props.goBack} />\r\n        {this.props.website.registrar && this.props.website.registrar.name ? \r\n          <div className='list-item' onClick={this.enableState.bind(this, 'enableViewRegistrar', true)}>\r\n            <label>Registrar:</label><strong>{this.props.website.registrar.name}</strong>\r\n          </div>\r\n          : ''\r\n        }\r\n        {this.props.website.host && this.props.website.host.name ? \r\n          <div className='list-item' onClick={this.enableState.bind(this, 'enableViewHost', true)}>\r\n            <label>Host:</label><strong>{this.props.website.host.name}</strong>\r\n          </div>\r\n          : ''\r\n        }\r\n        <div className='list-item'><label>URL:</label><CopyableText value={this.props.website.url}/></div>\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.website.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.website.password}/></div>\r\n        <div className='list-item'><label>FTP:</label><CopyableText value={this.props.website.ftp}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.website.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Website</button>\r\n        <button onClick={this.props.deleteWebsite}>Delete Website</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteEdit = () => {\r\n    return (\r\n      <div id=\"websiteEdit\">\r\n        <Title titleString=\"Edit Website\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditWebsiteForm \r\n          website={this.props.website} \r\n          updateWebsite={this.props.updateWebsite} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n          registrars={this.props.registrars}\r\n          hosts={this.props.hosts}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarInfo = () => {\r\n    let titleString = this.props.website.name + \": Registrar\";\r\n    return (\r\n      <div id='websiteRegistrarInfo'>\r\n        <Title titleString={titleString} onBack={this.enableState.bind(this, 'enableViewRegistrar', false)}/>\r\n        <RegistrarInfo \r\n          registrar={this.props.website.registrar}\r\n          selectedWebsite={this.props.website}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostInfo = () => {\r\n    let titleString = this.props.website.name + \": Host\";\r\n    return (\r\n      <div id='websiteHostInfo'>\r\n        <Title titleString={titleString} onBack={this.enableState.bind(this, 'enableViewHost', false)}/>\r\n        <HostInfo \r\n          host={this.props.website.host}\r\n          selectedWebsite={this.props.website}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderWebsiteEdit();\r\n    }\r\n    if(this.state.enableViewRegistrar){\r\n      return this.renderRegistrarInfo();\r\n    }\r\n    if(this.state.enableViewHost){\r\n      return this.renderHostInfo();\r\n    }\r\n    return this.renderWebsiteInfo();\r\n  }\r\n}\r\n\r\nexport default WebsiteInfo;","import React, {Component} from 'react';\r\nimport SelectRegistrarItem from './SelectRegistrarItem';\r\nimport SelectHostItem from './SelectHostItem';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddWebsiteForm extends Component {\r\n\r\n  state = {\r\n    websiteName: '',\r\n    url: '',\r\n    ftp: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: '',\r\n    registrar: this.props.selectedRegistrar,\r\n    host: this.props.selectedHost\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create website object\r\n    var website = {\r\n        name: this.state.websiteName,\r\n        url: this.state.url,\r\n        ftp: this.state.ftp,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    if(this.state.registrar) {\r\n      website.registrar = this.state.registrar;\r\n    }\r\n    if(this.state.host) {\r\n      website.host = this.state.host;\r\n    }\r\n    // Call addWebsite(), which is passed from WebsiteList as a prop\r\n    if(website.name && website.url) {\r\n      this.props.addWebsite(website);\r\n      this.props.disableAddWebsite();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const registrars = this.props.registrars.map((r) => (\r\n      <SelectRegistrarItem\r\n        key={r._id}\r\n        registrar={r}\r\n        id={r._id}\r\n      />\r\n    ));\r\n    const hosts = this.props.hosts.map((h) => (\r\n      <SelectHostItem\r\n        key={h._id}\r\n        host={h}\r\n        id={h._id}\r\n      />\r\n    ));\r\n    return (\r\n      <section id=\"websiteAddForm\">\r\n        <form id=\"websiteAddInput\">\r\n          <TextInput\r\n            name='websiteName'\r\n            value={this.state.websiteName}\r\n            onChange={this.handleChange}\r\n            placeholder='Website'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='url'\r\n            value={this.state.url}\r\n            onChange={this.handleChange}\r\n            placeholder='URL'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='ftp'\r\n            value={this.state.ftp}\r\n            onChange={this.handleChange}\r\n            placeholder='FTP'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          Registrar: {!this.props.selectedRegistrar ?\r\n            <select\r\n              name='registrar'\r\n              onChange={this.handleChange}\r\n            >\r\n              <option value=''>----------None----------</option>\r\n              {registrars}\r\n            </select>\r\n            : ''\r\n          }\r\n          Host: {!this.props.selectedHost ?\r\n            <select\r\n              name='host'\r\n              onChange={this.handleChange}\r\n            >\r\n              <option value=''>----------None----------</option>\r\n              {hosts}\r\n            </select>\r\n            : ''\r\n          }\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Website</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddWebsiteForm;","import React, {Component} from 'react';\r\n\r\nclass Search extends Component {\r\n\r\n  state = {\r\n    searchQuery: ''\r\n  };\r\n\r\n  handleChange = async(e) => {\r\n    // [e.target.name] is a computed property name\r\n    await this.setState({ [e.target.name]: e.target.value });\r\n    // Call search(), which is passed to this component as a prop\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n\r\n    // Call search(), which is passed to this component as a prop\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  clearSearch = async(e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n\r\n    await this.setState({searchQuery: ''});\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"searchForm\">\r\n        <form id=\"searchInput\">\r\n          <input\r\n            type='text'\r\n            name='searchQuery'\r\n            value={this.state.searchQuery}\r\n            onChange={this.handleChange}\r\n            placeholder='Search'\r\n          />\r\n          <input type='submit' onClick={this.handleSubmit} style={{display: 'none'}}></input>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport WebsiteListItem from './WebsiteListItem';\r\nimport WebsiteInfo from './WebsiteInfo';\r\nimport AddWebsiteForm from './AddWebsiteForm';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass WebsiteList extends Component {\r\n\r\n  state = {\r\n    selectedWebsite: null,\r\n    enableAddWebsite: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchWebsites(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectWebsite = (website) => {\r\n    this.updateWebsite(website);\r\n    this.setState({selectedWebsite: {...website}})\r\n    this.setState({enableAddWebsite: false});\r\n    this.searchWebsites(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectWebsite = () => {\r\n    this.setState({selectedWebsite: null});\r\n  }\r\n\r\n  addWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new website and update state\r\n      let newWebsite = await apiCalls.createWebsite(website);\r\n      this.props.updateWebsites([...this.props.websites, newWebsite]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  updateWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update website\r\n      let updatedSite = await apiCalls.updateWebsite(website);\r\n      // Find website in websites and replace it with updatedSite\r\n      const websites = this.props.websites.map(website => {\r\n        return (website._id === updatedSite._id ? updatedSite : website);\r\n      });\r\n      // Update state\r\n      this.setState({selectedWebsite: {...updatedSite}});\r\n      this.props.updateWebsites(websites)\r\n    }\r\n  }\r\n\r\n  deleteWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedWebsite: null});\r\n      await apiCalls.removeWebsite(website._id);\r\n      const websites = this.props.websites.filter(w => w._id !== website._id);\r\n      this.props.updateWebsites(websites);\r\n    }\r\n  }\r\n\r\n  searchWebsites = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingSites = await apiCalls.searchWebsites(query);\r\n        this.props.updateWebsites(matchingSites);\r\n      } else {\r\n        let allSites = await apiCalls.getWebsites();\r\n        this.props.updateWebsites(allSites);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderWebsiteList = () => {\r\n    var websites;\r\n    var titleString = \"\";\r\n    if(this.props.selectedHost) titleString = this.props.selectedHost.name + \": Hosted Websites\";\r\n    if(this.props.selectedRegistrar) titleString = this.props.selectedRegistrar.name + \": Registered Websites\";\r\n    if(!this.props.selectedRegistrar && !this.props.selectedHost) titleString = \"All Websites\";\r\n\r\n    // If there is a selected host or registrar, only display websites for that host or registrar\r\n    // selectedHost and selectedRegistrar are passed as props from HostInfo and RegistrarInfo, respectively\r\n    if(this.props.selectedHost) {\r\n      websites = this.props.websites.filter(w => w.host && w.host._id === this.props.selectedHost._id);\r\n    }\r\n    else if(this.props.selectedRegistrar) {\r\n      websites = this.props.websites.filter(w => w.registrar && w.registrar._id === this.props.selectedRegistrar._id);\r\n    }\r\n    else {\r\n      websites = this.props.websites;\r\n    }\r\n    const websiteListItems = websites.map((w) => (\r\n      <WebsiteListItem\r\n        key={w._id}\r\n        {...w}\r\n        id={w._id}\r\n        onSelect={this.selectWebsite.bind(this, w)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"WebsiteList\">\r\n        <Title titleString={titleString} onBack = {this.props.goBack}/>\r\n        <Search search={this.searchWebsites}></Search>\r\n        <ul>\r\n          {websiteListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddWebsite', true)}>Add Website</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddWebsite = () => {\r\n    var titleString = 'New Website';\r\n    if(this.props.selectedHost) titleString = this.props.selectedHost.name + ': New Website';\r\n    if(this.props.selectedRegistrar) titleString = this.props.selectedRegistrar.name + ': New Website';\r\n\r\n    return (\r\n      <div id=\"websiteAddNew\">\r\n        <Title titleString = {titleString} onBack={this.enableState.bind(this, 'enableAddWebsite', false)}/>\r\n        <AddWebsiteForm \r\n          addWebsite={this.addWebsite} \r\n          disableAddWebsite={this.enableState.bind(this, 'enableAddWebsite', false)}\r\n          registrars={this.props.registrars}\r\n          hosts={this.props.hosts}\r\n          selectedHost={this.props.selectedHost}\r\n          selectedRegistrar={this.props.selectedRegistrar}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteInfo = () => {\r\n    return (\r\n      <WebsiteInfo \r\n        website={this.state.selectedWebsite} \r\n        goBack={this.deselectWebsite}\r\n        updateWebsite={this.updateWebsite}\r\n        deleteWebsite={this.deleteWebsite.bind(this, this.state.selectedWebsite)}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedWebsite !== null){\r\n      return this.renderWebsiteInfo();\r\n    }\r\n    if(this.state.enableAddWebsite){\r\n      return this.renderAddWebsite();\r\n    }\r\n    return this.renderWebsiteList();\r\n  }\r\n}\r\n\r\nexport default WebsiteList;","import React from 'react';\r\n\r\nconst RegistrarListItem = ({name, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n      <strong>{name}</strong>\r\n  </li>\r\n)\r\n\r\nexport default RegistrarListItem;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddRegistrarForm extends Component {\r\n\r\n  state = {\r\n    registrarName: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create registrar object\r\n    var registrar = {\r\n        name: this.state.registrarName,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    // Call addRegistrar(), which is passed from RegistrarList as a prop\r\n    if(registrar.name) {\r\n      this.props.addRegistrar(registrar);\r\n      this.props.disableAddRegistrar();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"registrarAddForm\">\r\n        <form id=\"registrarAddInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='registrarName'\r\n            value={this.state.registrarName}\r\n            onChange={this.handleChange}\r\n            placeholder='Registrar'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Registrar</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddRegistrarForm;","import React, { Component } from 'react'\r\nimport RegistrarListItem from './RegistrarListItem';\r\nimport AddRegistrarForm from './AddRegistrarForm';\r\nimport RegistrarInfo from './RegistrarInfo';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass RegistrarList extends Component {\r\n\r\n  state = {\r\n    selectedRegistrar: null,\r\n    enableAddRegistrar: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  addRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new registrar and update state\r\n      let newRegistrar = await apiCalls.createRegistrar(registrar);\r\n      this.props.updateRegistrars([...this.props.registrars, newRegistrar]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchRegistrars(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectRegistrar = (registrar) => {\r\n    this.setState({selectedRegistrar: {...registrar}})\r\n    this.setState({enableAddRegistrar: false});\r\n    this.searchRegistrars(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectRegistrar = () => {\r\n    this.setState({selectedRegistrar: null});\r\n  }\r\n\r\n  updateRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update registrar\r\n      let updatedReg = await apiCalls.updateRegistrar(registrar);\r\n      // Find registrar in registrars and replace it with updatedReg\r\n      const registrars = this.props.registrars.map(registrar => {\r\n        return (registrar._id === updatedReg._id ? updatedReg : registrar);\r\n      });\r\n      // Update state\r\n      this.setState({selectedRegistrar: {...updatedReg}});\r\n      this.props.updateRegistrars(registrars);\r\n    }\r\n  }\r\n\r\n  deleteRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedRegistrar: null});\r\n      await apiCalls.removeRegistrar(registrar._id);\r\n      const registrars = this.props.registrars.filter(r => r._id !== registrar._id);\r\n      this.props.updateRegistrars(registrars);\r\n    }\r\n  }\r\n\r\n  searchRegistrars = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingRegistrars = await apiCalls.searchRegistrars(query);\r\n        this.props.updateRegistrars(matchingRegistrars);\r\n      } else {\r\n        let allRegistrars = await apiCalls.getRegistrars();\r\n        this.props.updateRegistrars(allRegistrars);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderRegistrarList = () => {\r\n    const registrarListItems = this.props.registrars.map((r) => (\r\n      <RegistrarListItem\r\n        key={r._id}\r\n        {...r}\r\n        id={r._id}\r\n        onSelect={this.selectRegistrar.bind(this, r)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"RegistrarList\">\r\n        <Title titleString=\"All Registrars\" onBack={this.props.goBack}/>\r\n        <Search search={this.searchRegistrars}></Search>\r\n        <ul>\r\n          {registrarListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddRegistrar', true)}>Add Registrar</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddRegistrar = () => {\r\n    return(\r\n      <div id=\"registrarAddNew\">\r\n        <Title titleString=\"New Registrar\" onBack={this.enableState.bind(this, 'enableAddRegistrar', false)}/>\r\n        <AddRegistrarForm \r\n          addRegistrar={this.addRegistrar} \r\n          disableAddRegistrar={this.enableState.bind(this, 'enableAddRegistrar', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarInfo = () => {\r\n    return (\r\n      <RegistrarInfo \r\n        registrar={this.state.selectedRegistrar} \r\n        goBack={this.deselectRegistrar}\r\n        updateRegistrar={this.updateRegistrar}\r\n        deleteRegistrar={this.deleteRegistrar.bind(this, this.state.selectedRegistrar)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedRegistrar !== null){\r\n      return this.renderRegistrarInfo();\r\n    }\r\n    if(this.state.enableAddRegistrar){\r\n      return this.renderAddRegistrar();\r\n    }\r\n    return this.renderRegistrarList();\r\n  }\r\n}\r\n\r\nexport default RegistrarList;","import React from 'react';\r\n\r\nconst HostListItem = ({name, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n      <strong>{name}</strong>\r\n  </li>\r\n)\r\n\r\nexport default HostListItem;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddHostForm extends Component {\r\n\r\n  state = {\r\n    hostName: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create host object\r\n    var host = {\r\n        name: this.state.hostName,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    // Call addHost(), which is passed from HostList as a prop\r\n    if(host.name) {\r\n      this.props.addHost(host);\r\n      this.props.disableAddHost();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"hostAddForm\">\r\n        <form id=\"hostAddInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='hostName'\r\n            value={this.state.hostName}\r\n            onChange={this.handleChange}\r\n            placeholder='Host'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Host</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddHostForm;","import React, { Component } from 'react'\r\nimport HostListItem from './HostListItem';\r\nimport AddHostForm from './AddHostForm';\r\nimport HostInfo from './HostInfo';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass HostList extends Component {\r\n\r\n  state = {\r\n    selectedHost: null,\r\n    enableAddHost: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  addHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new host and update state\r\n      let newHost = await apiCalls.createHost(host);\r\n      this.props.updateHosts([...this.props.hosts, newHost]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchHosts(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectHost = (host) => {\r\n    this.setState({selectedHost: {...host}})\r\n    this.setState({enableAddHost: false});\r\n    this.searchHosts(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectHost = () => {\r\n    this.setState({selectedHost: null});\r\n  }\r\n\r\n  updateHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update host\r\n      let updatedHost = await apiCalls.updateHost(host);\r\n      // Find host in hosts and replace it with updatedHost\r\n      const hosts = this.props.hosts.map(host => {\r\n        return (host._id === updatedHost._id ? updatedHost : host);\r\n      });\r\n      // Update state\r\n      this.setState({selectedHost: {...updatedHost}});\r\n      this.props.updateHosts(hosts);\r\n    }\r\n  }\r\n\r\n  deleteHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedHost: null});\r\n      await apiCalls.removeHost(host._id);\r\n      const hosts = this.props.hosts.filter(r => r._id !== host._id);\r\n      this.props.updateHosts(hosts);\r\n    }\r\n  }\r\n\r\n  searchHosts = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingHosts = await apiCalls.searchHosts(query);\r\n        this.props.updateHosts(matchingHosts);\r\n      } else {\r\n        let allHosts = await apiCalls.getHosts();\r\n        this.props.updateHosts(allHosts);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderHostList = () => {\r\n    const hostListItems = this.props.hosts.map((r) => (\r\n      <HostListItem\r\n        key={r._id}\r\n        {...r}\r\n        id={r._id}\r\n        onSelect={this.selectHost.bind(this, r)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"HostList\">\r\n        <Title titleString=\"All Hosts\" onBack={this.props.goBack}/>\r\n        <Search search={this.searchHosts}></Search>\r\n        <ul>\r\n          {hostListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddHost', true)}>Add Host</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddHost = () => {\r\n    return(\r\n      <div id=\"hostAddNew\">\r\n        <Title titleString=\"New Host\" onBack={this.enableState.bind(this, 'enableAddHost', false)}/>\r\n        <AddHostForm \r\n          addHost={this.addHost} \r\n          disableAddHost={this.enableState.bind(this, 'enableAddHost', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostInfo = () => {\r\n    return (\r\n      <HostInfo \r\n        host={this.state.selectedHost} \r\n        goBack={this.deselectHost}\r\n        updateHost={this.updateHost}\r\n        deleteHost={this.deleteHost.bind(this, this.state.selectedHost)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedHost !== null){\r\n      return this.renderHostInfo();\r\n    }\r\n    if(this.state.enableAddHost){\r\n      return this.renderAddHost();\r\n    }\r\n    return this.renderHostList();\r\n  }\r\n}\r\n\r\nexport default HostList;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass LoginForm extends Component {\r\n\r\n  state = {\r\n    userName: '',\r\n    password: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create user object\r\n    if(this.state.userName && this.state.password) {\r\n      var user = {\r\n        username: this.state.userName,\r\n        password: this.state.password\r\n      }\r\n      // login() is passed from App.js as a prop\r\n      this.props.login(user);\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"login\">\r\n        <form id=\"loginForm\">\r\n          <h3>Please Log In:</h3>\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Login</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass RegisterForm extends Component {\r\n\r\n  state = {\r\n    userName: '',\r\n    password: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create user object\r\n    if(this.state.userName && this.state.password) {\r\n      var user = {\r\n        username: this.state.userName,\r\n        password: this.state.password\r\n      }\r\n      // registerUser() is passed from App.js as a prop\r\n      this.props.registerUser(user);\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"register\">\r\n        <form id=\"registerForm\">\r\n          <h3>First Time Set Up:</h3>\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Register</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegisterForm;","import React from 'react';\r\n\r\nconst MaiHeader = () => (\r\n  <div className=\"MaiHeader\">\r\n    <h1>MAI</h1>\r\n    <h2><i className=\"fa fa-cloud\"></i> domain<span>manager</span></h2>\r\n  </div>\r\n)\r\n\r\nexport default MaiHeader;","import React from 'react';\r\n\r\nconst HomeButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"homeButton\" className=\"fa fa-home fa-2x\"></i></div>\r\n)\r\n\r\nexport default HomeButton;","import React from 'react';\r\n\r\nconst LogOutButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"logOutButton\" className=\"fa fa-sign-out fa-2x\"></i></div>\r\n)\r\n\r\nexport default LogOutButton;","import React, { Component } from 'react'\r\nimport WebsiteList from './Websites/WebsiteList';\r\nimport RegistrarList from './Registrars/RegistrarList';\r\nimport HostList from './Hosts/HostList';\r\nimport LoginForm from './General/LoginForm';\r\nimport RegisterForm from './General/RegisterForm';\r\nimport MaiHeader from './General/MaiHeader';\r\nimport './App.css';\r\nimport './assets/font-awesome/css/font-awesome.min.css';\r\nimport HomeButton from './General/HomeButton';\r\nimport LogOutButton from './General/LogOutButton';\r\n\r\nvar apiCalls = require('./Utils/api');\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    currentView: 'home',\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: [],\r\n    loggedIn: false\r\n  }\r\n\r\n  componentWillMount = async() => {\r\n    await this.checkLogin(); // The user may already have a session and be logged in when the page loads\r\n    if(this.state.loggedIn) {\r\n      this.setView('home'); // If the user is logged in, skip the login step\r\n    } else if (await this.checkRegisteredUsers() === true){ // If a registered user exists, show the login form\r\n      this.setView('login');\r\n    } else {\r\n      // If there are no registered users, show the register form. There should only ever be one user,\r\n      // so this step is for first time set up only\r\n      this.setView('registerUser');\r\n    }\r\n  }\r\n\r\n  // Register a new user\r\n  registerUser = async(user) => {\r\n    let newUser = await apiCalls.registerUser(user);\r\n    if(newUser && newUser.username) {\r\n      this.setState({loggedIn: true});\r\n      this.setView('home');\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n    }\r\n  }\r\n\r\n  // Get the number of registered users. If there are no registered users, return false. Otherwise, return true\r\n  checkRegisteredUsers = async() => {\r\n    let registeredUsers = await apiCalls.checkRegisteredUsers();\r\n    if(registeredUsers && registeredUsers.count > 0) { return true; }\r\n    return false;\r\n  }\r\n\r\n  // Log in the provided user\r\n  login = async(user) => {\r\n    let foundUser = await apiCalls.login(user);\r\n    if(foundUser && foundUser.username) {\r\n      this.setState({loggedIn: true});\r\n      this.setView('home');\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n    }\r\n  }\r\n\r\n  // Check to see if the user is already logged in. If so, return true. Otherwise, return false.\r\n  checkLogin = async() => {\r\n    let foundUser = await apiCalls.checkLogin();\r\n    if(foundUser && foundUser.username) {\r\n      this.setState({loggedIn: true});\r\n      return true;\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Log out the current user\r\n  logout = async() => {\r\n    apiCalls.logout();\r\n    this.setState({loggedIn: false});\r\n    this.setView('login');\r\n  }\r\n\r\n  // Get all websites\r\n  loadWebsites = async() => {\r\n    let websites = await apiCalls.getWebsites();\r\n    this.setState({websites: [...websites]});\r\n  }\r\n\r\n  // Get all registrars\r\n  loadRegistrars = async() => {\r\n    let registrars = await apiCalls.getRegistrars();\r\n    this.setState({registrars: [...registrars]});\r\n  }\r\n\r\n  // Get all hosts\r\n  loadHosts = async() => {\r\n    let hosts = await apiCalls.getHosts();\r\n    this.setState({hosts: [...hosts]});\r\n  }\r\n\r\n  // Check if user is logged in. If so, get data. Otherwise, display login form.\r\n  loadAll = async() => {\r\n    this.checkLogin();\r\n    if(this.state.loggedIn) {\r\n      this.loadWebsites();\r\n      this.loadRegistrars();\r\n      this.loadHosts();\r\n    }\r\n    else {\r\n      this.setView('login');\r\n    }\r\n  }\r\n\r\n  // Sets the current view\r\n  setView = async(view) => {\r\n    if(view === 'home') {\r\n      await this.loadAll();\r\n    }\r\n    this.setState({currentView : view});\r\n  }\r\n\r\n  // Update websites in state\r\n  updateWebsites = async(websites) => {\r\n    this.setState({websites: [...websites]});\r\n  }\r\n\r\n  // Update registrars in state\r\n  updateRegistrars = (registrars) => {\r\n    this.setState({registrars: [...registrars]});\r\n  }\r\n\r\n  // Update hosts in state\r\n  updateHosts = (hosts) => {\r\n    this.setState({hosts: [...hosts]});\r\n  }\r\n\r\n  renderHomeView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <MaiHeader />\r\n        <button onClick={this.setView.bind(this, 'websites')}>Websites</button>\r\n        <button onClick={this.setView.bind(this, 'registrars')}>Registrars</button>\r\n        <button onClick={this.setView.bind(this, 'hosts')}>Hosts</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderLoginView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <MaiHeader />\r\n        <LoginForm login={this.login}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegisterUserView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <MaiHeader />\r\n        <RegisterForm registerUser={this.registerUser}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <WebsiteList\r\n          back={this.back}\r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <RegistrarList \r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateRegistrars={this.updateRegistrars}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <HostList \r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateHosts={this.updateHosts}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.currentView === \"registerUser\") {\r\n      return this.renderRegisterUserView();\r\n    }\r\n    if(this.state.currentView === \"login\") {\r\n      return this.renderLoginView();\r\n    }\r\n    if(this.state.currentView === \"websites\") {\r\n      return this.renderWebsiteView();\r\n    }\r\n    if(this.state.currentView === \"registrars\") {\r\n      return this.renderRegistrarView();\r\n    }\r\n    if(this.state.currentView === \"hosts\") {\r\n      return this.renderHostView();\r\n    }\r\n    return this.renderHomeView();\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}