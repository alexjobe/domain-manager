{"version":3,"sources":["Utils/api.js","Utils/loginAPI.js","Utils/websiteAPI.js","Utils/registrarAPI.js","Utils/hostAPI.js","Websites/WebsiteListItem.js","Websites/SelectRegistrarItem.js","Websites/SelectHostItem.js","General/TextInput.js","Websites/EditWebsiteForm.js","General/CopyableText.js","Registrars/EditRegistrarForm.js","General/BackButton.js","General/Title.js","Registrars/RegistrarTitle.js","Registrars/RegistrarInfo.js","Hosts/EditHostForm.js","Hosts/HostTitle.js","Hosts/HostInfo.js","Websites/WebsiteInfo.js","Websites/AddWebsiteForm.js","General/Search.js","Websites/WebsiteList.js","Registrars/RegistrarListItem.js","Registrars/AddRegistrarForm.js","Registrars/RegistrarList.js","Hosts/HostListItem.js","Hosts/AddHostForm.js","Hosts/HostList.js","General/LoginForm.js","General/RegisterForm.js","General/MaiHeader.js","General/HomeButton.js","General/LogOutButton.js","App.js","serviceWorker.js","index.js"],"names":["loginAPI","require","websiteAPI","registrarAPI","hostAPI","exports","login","checkLogin","logout","registerUser","checkRegisteredUsers","getWebsites","getWebsite","searchWebsites","createWebsite","updateWebsite","removeWebsite","getRegistrars","searchRegistrars","createRegistrar","updateRegistrar","removeRegistrar","getHosts","searchHosts","createHost","updateHost","removeHost","module","USER_URL","process","REACT_APP_BACKEND_URL","LOGIN_URL","LOGOUT_URL","REGISTER_URL","_ref","Object","C_Users_AlexJ_workspace_domain_manager_domain_manager_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_Users_AlexJ_workspace_domain_manager_domain_manager_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","user","wrap","_context","prev","next","abrupt","fetch","method","headers","Headers","Content-Type","body","JSON","stringify","credentials","then","resp","ok","status","json","data","errorMessage","message","stop","_x","apply","this","arguments","_callee2","_context2","_callee3","_context3","_ref4","_callee4","_context4","_x2","_callee5","_context5","WEBSITE_URL","_ref2","id","getURL","_ref3","query","website","_x3","_ref5","updateURL","_id","_x4","_ref6","_callee6","deleteURL","_context6","_x5","REGISTRAR_URL","registrar","HOST_URL","host","WebsiteListItem","name","url","onSelect","react_default","createElement","onClick","SelectRegistrarItem","value","SelectHostItem","TextInput","state","hasFocus","handleBlur","_this","setState","handleFocus","render","placeholder","props","type","onChange","onFocus","onBlur","Component","EditWebsiteForm","websiteName","ftp","userName","password","notes","handleChange","e","defineProperty","target","handleSubmit","preventDefault","updatedWebsite","objectSpread","disableEditMode","registrars","map","r","Websites_SelectRegistrarItem","key","hosts","h","Websites_SelectHostItem","General_TextInput","className","rows","CopyableText","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","textArea","current","copyToClipboard","select","document","execCommand","focus","ref","readOnly","React","createRef","EditRegistrarForm","registrarName","updatedRegistrar","BackButton","Title","titleString","onBack","General_BackButton","RegistrarTitle","selectedWebsite","General_Title","goBack","RegistrarInfo","enableEditMode","enableViewWebsites","enableState","isEnabled","renderRegistrarInfo","Registrars_RegistrarTitle","General_CopyableText","disabled","websites","bind","assertThisInitialized","deleteRegistrar","renderRegistrarEdit","Registrars_EditRegistrarForm","renderRegistrarWebsites","Websites_WebsiteList","updateWebsites","selectedRegistrar","EditHostForm","hostName","updatedHost","HostTitle","HostInfo","renderHostInfo","Hosts_HostTitle","deleteHost","renderHostEdit","Hosts_EditHostForm","renderHostWebsites","selectedHost","WebsiteInfo","enableViewRegistrar","enableViewHost","renderWebsiteInfo","deleteWebsite","renderWebsiteEdit","Websites_EditWebsiteForm","Registrars_RegistrarInfo","Hosts_HostInfo","AddWebsiteForm","addWebsite","disableAddWebsite","Search","searchQuery","regenerator_default","search","clearSearch","style","display","apiCalls","WebsiteList","enableAddWebsite","selectWebsite","deselectWebsite","newWebsite","sent","concat","toConsumableArray","updatedSite","filter","w","matchingSites","allSites","renderWebsiteList","websiteListItems","Websites_WebsiteListItem","assign","General_Search","renderAddWebsite","Websites_AddWebsiteForm","Websites_WebsiteInfo","defaultProps","RegistrarListItem","AddRegistrarForm","addRegistrar","disableAddRegistrar","RegistrarList","enableAddRegistrar","newRegistrar","updateRegistrars","selectRegistrar","deselectRegistrar","updatedReg","matchingRegistrars","allRegistrars","renderRegistrarList","registrarListItems","Registrars_RegistrarListItem","renderAddRegistrar","Registrars_AddRegistrarForm","HostListItem","AddHostForm","addHost","disableAddHost","HostList","enableAddHost","newHost","updateHosts","selectHost","deselectHost","matchingHosts","allHosts","renderHostList","hostListItems","Hosts_HostListItem","renderAddHost","Hosts_AddHostForm","LoginForm","username","RegisterForm","MaiHeader","HomeButton","LogOutButton","App","currentView","loggedIn","componentWillMount","setView","t0","newUser","registeredUsers","count","foundUser","loadWebsites","_callee7","_context7","loadRegistrars","_callee8","_context8","loadHosts","_callee9","_context9","loadAll","_callee10","_context10","_callee11","view","_context11","_callee12","_context12","renderHomeView","General_HomeButton","General_LogOutButton","General_MaiHeader","renderLoginView","General_LoginForm","renderRegisterUserView","General_RegisterForm","renderWebsiteView","back","renderRegistrarView","Registrars_RegistrarList","renderHostView","Hosts_HostList","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b40f5f9.chunk.js","sourcesContent":["// --------------------------------------------------------------- //\r\n// -------- API functions for making calls to the backend -------- //\r\n// --------------------------------------------------------------- //\r\n\r\n// API functions are split into different files, for organization\r\nvar loginAPI = require('./loginAPI');\r\nvar websiteAPI = require('./websiteAPI');\r\nvar registrarAPI = require('./registrarAPI');\r\nvar hostAPI = require('./hostAPI');\r\n\r\n// --------------------------------------------------------------- //\r\n// --------------------------- LOGIN API ------------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.login = loginAPI.login;\r\nexports.checkLogin = loginAPI.checkLogin;\r\nexports.logout = loginAPI.logout;\r\nexports.registerUser = loginAPI.registerUser;\r\nexports.checkRegisteredUsers = loginAPI.checkRegisteredUsers;\r\n\r\n// --------------------------------------------------------------- //\r\n// --------------------------- Website API ----------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getWebsites = websiteAPI.getWebsites;\r\nexports.getWebsite = websiteAPI.getWebsite;\r\nexports.searchWebsites  = websiteAPI.searchWebsites;\r\nexports.createWebsite = websiteAPI.createWebsite;\r\nexports.updateWebsite = websiteAPI.updateWebsite;\r\nexports.removeWebsite = websiteAPI.removeWebsite;\r\n\r\n// --------------------------------------------------------------- //\r\n// -------------------------- Registrar API ---------------------- //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getRegistrars = registrarAPI.getRegistrars;\r\nexports.searchRegistrars = registrarAPI.searchRegistrars;\r\nexports.createRegistrar = registrarAPI.createRegistrar;\r\nexports.updateRegistrar = registrarAPI.updateRegistrar;\r\nexports.removeRegistrar = registrarAPI.removeRegistrar;\r\n\r\n// --------------------------------------------------------------- //\r\n// ----------------------------- Host API ------------------------ //\r\n// --------------------------------------------------------------- //\r\n\r\nexports.getHosts = hostAPI.getHosts;\r\nexports.searchHosts = hostAPI.searchHosts;\r\nexports.createHost = hostAPI.createHost;\r\nexports.updateHost = hostAPI.updateHost;\r\nexports.removeHost = hostAPI.removeHost;\r\n\r\nmodule.exports = exports;","// --------------------------------------------------------------- //\r\n// --------------------------- LOGIN API ------------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst USER_URL = BACKEND_URL + '/api/user/';\r\nconst LOGIN_URL = USER_URL + 'login';\r\nconst LOGOUT_URL = USER_URL + 'logout';\r\nconst REGISTER_URL = USER_URL + 'register'\r\n\r\n// Login user with given credentials\r\nexports.login = async(user) => {\r\n  return fetch(LOGIN_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(user),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\n// Checks to see if there is a current user session\r\nexports.checkLogin = async() => {\r\n  return fetch(LOGIN_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\n// Terminates current user session\r\nexports.logout = async() => {\r\n  return fetch(LOGOUT_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\n// Registers a new user\r\nexports.registerUser = async(user) => {\r\n  return fetch(REGISTER_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(user),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\n// Returns the number of registered users\r\nexports.checkRegisteredUsers = async() => {\r\n  return fetch(REGISTER_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nmodule.exports = exports;","// --------------------------------------------------------------- //\r\n// --------------------------- Website API ----------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst WEBSITE_URL = BACKEND_URL + '/api/websites/';\r\n\r\nexports.getWebsites = async() => {\r\n  return fetch(WEBSITE_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.getWebsite = async(id) => {\r\n  const getURL = WEBSITE_URL + id;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.searchWebsites = async(query) => {\r\n  const getURL = WEBSITE_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.createWebsite = async(website) => {\r\n  return fetch(WEBSITE_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(website),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.updateWebsite = async(website) => {\r\n  const updateURL = WEBSITE_URL + website._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(website),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.removeWebsite = async(id) => {\r\n  const deleteURL = WEBSITE_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nmodule.exports = exports;","// --------------------------------------------------------------- //\r\n// -------------------------- Registrar API ---------------------- //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst REGISTRAR_URL = BACKEND_URL + '/api/registrars/';\r\n\r\nexports.getRegistrars = async() => {\r\n  return fetch(REGISTRAR_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.searchRegistrars = async(query) => {\r\n  const getURL = REGISTRAR_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.createRegistrar = async(registrar) => {\r\n  return fetch(REGISTRAR_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(registrar),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.updateRegistrar = async(registrar) => {\r\n  const updateURL = REGISTRAR_URL + registrar._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(registrar),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.removeRegistrar = async(id) => {\r\n  const deleteURL = REGISTRAR_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nmodule.exports = exports;","// --------------------------------------------------------------- //\r\n// ----------------------------- Host API ------------------------ //\r\n// --------------------------------------------------------------- //\r\nvar BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\r\nconst HOST_URL = BACKEND_URL + '/api/hosts/';\r\n\r\nexports.getHosts = async() => {\r\n  return fetch(HOST_URL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.searchHosts = async(query) => {\r\n  const getURL = HOST_URL + 'search/' + query;\r\n  return fetch(getURL, {credentials: 'include'}) // Credentials are required for CORS to recognize user session\r\n    .then(resp => {\r\n      if(!resp.ok) {\r\n        if(resp.status >= 400 && resp.status < 500){\r\n          return resp.json().then(data => {\r\n            let err = {errorMessage: data.message};\r\n            throw err;\r\n          })\r\n        } else {\r\n          let err = {errorMessage: 'Error: Server is not responding'};\r\n          throw err;\r\n        }\r\n      }\r\n      return resp.json();\r\n  })\r\n}\r\n\r\nexports.createHost = async(host) => {\r\n  return fetch(HOST_URL, {\r\n    method: 'post',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(host),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.updateHost = async(host) => {\r\n  const updateURL = HOST_URL + host._id;\r\n\r\n  return fetch(updateURL, {\r\n    method: 'put',\r\n    headers: new Headers({\r\n      'Content-Type': 'application/json'\r\n    }),\r\n    body: JSON.stringify(host),\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nexports.removeHost = async(id) => {\r\n  const deleteURL = HOST_URL + id;\r\n\r\n  return fetch(deleteURL, {\r\n    method: 'delete',\r\n    credentials: 'include' // Credentials are required for CORS to recognize user session\r\n  })\r\n  .then(resp => {\r\n    if(!resp.ok) {\r\n      if(resp.status >= 400 && resp.status < 500){\r\n        return resp.json().then(data => {\r\n          let err = {errorMessage: data.message};\r\n          throw err;\r\n        })\r\n      } else {\r\n        let err = {errorMessage: 'Error: Server is not responding'};\r\n        throw err;\r\n      }\r\n    }\r\n    return resp.json();\r\n  })\r\n}\r\n\r\nmodule.exports = exports;","import React from 'react';\r\n\r\nconst WebsiteListItem = ({name, url, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n    <span>\r\n      <strong>{name}</strong>: {url}\r\n    </span>\r\n  </li>\r\n)\r\n\r\nexport default WebsiteListItem;","import React from 'react';\r\n\r\nconst SelectRegistrarItem = ({registrar}) => (\r\n  <option\r\n    value={registrar._id}\r\n  >\r\n    {registrar.name}\r\n  </option>\r\n)\r\n\r\nexport default SelectRegistrarItem;","import React from 'react';\r\n\r\nconst SelectHostItem = ({host}) => (\r\n  <option\r\n    value={host._id}\r\n  >\r\n    {host.name}\r\n  </option>\r\n)\r\n\r\nexport default SelectHostItem;","import React, {Component} from 'react';\r\n\r\nclass TextInput extends Component {\r\n\r\n  state = {\r\n    hasFocus: false\r\n  };\r\n\r\n  handleBlur = () => {\r\n    // The onBlur DOM event occurs when an object loses focus\r\n    this.setState({hasFocus: false});\r\n  }\r\n\r\n  handleFocus = () => {\r\n    // The onFocus DOM event occurs when an object has focus\r\n    this.setState({hasFocus: true});\r\n  }\r\n\r\n  render = () => {\r\n    var placeholder = this.props.placeholder;\r\n    if(this.props.value) {\r\n      // If value is passed as a prop, render placeholder and value, for example: \"User Name: Bilbo\" where\r\n      // placeholder is \"User Name\" and value is \"Bilbo\"\r\n      placeholder = placeholder + ': ' + this.props.value;\r\n    }\r\n    return (\r\n      <input \r\n        name={this.props.name}\r\n        type='text'\r\n        value={this.state.hasFocus? this.props.value : ''}\r\n        onChange={this.props.onChange}\r\n        placeholder={placeholder}\r\n        onFocus = {this.handleFocus}\r\n        onBlur= {this.handleBlur}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextInput;","import React, {Component} from 'react';\r\nimport SelectRegistrarItem from './SelectRegistrarItem';\r\nimport SelectHostItem from './SelectHostItem';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditWebsiteForm extends Component {\r\n\r\n  state = {\r\n    websiteName: this.props.website.name,\r\n    url: this.props.website.url,\r\n    ftp: this.props.website.ftp,\r\n    userName: this.props.website.userName,\r\n    password: this.props.website.password,\r\n    notes: this.props.website.notes,\r\n    registrar: this.props.website.registrar,\r\n    host: this.props.website.host\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.websiteName && this.state.url){\r\n      // Create updated website object\r\n      var updatedWebsite = {...this.props.website};\r\n      updatedWebsite.name = this.state.websiteName;\r\n      updatedWebsite.url = this.state.url;\r\n      updatedWebsite.ftp = this.state.ftp;\r\n      updatedWebsite.userName = this.state.userName;\r\n      updatedWebsite.password = this.state.password;\r\n      updatedWebsite.notes = this.state.notes;\r\n      updatedWebsite.registrar = this.state.registrar;\r\n      updatedWebsite.host = this.state.host;\r\n\r\n      // ObjectIDs cannot be empty strings, but they can be null\r\n      if(updatedWebsite.registrar === ''){updatedWebsite.registrar = null}\r\n      if(updatedWebsite.host === ''){updatedWebsite.host = null}\r\n\r\n      // Call updateWebsite(), which is passed from WebsiteList as a prop\r\n      this.props.updateWebsite(updatedWebsite);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const registrars = this.props.registrars.map((r) => (\r\n      <SelectRegistrarItem\r\n        key={r._id}\r\n        registrar={r}\r\n        id={r._id}\r\n      />\r\n    ));\r\n    const hosts = this.props.hosts.map((h) => (\r\n      <SelectHostItem\r\n        key={h._id}\r\n        host={h}\r\n        id={h._id}\r\n      />\r\n    ));\r\n    return (\r\n      <section id=\"websiteEditForm\">\r\n        <form id=\"websiteEditInput\">\r\n          <TextInput\r\n            name='websiteName'\r\n            value={this.state.websiteName}\r\n            onChange={this.handleChange}\r\n            placeholder='Website'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='url'\r\n            value={this.state.url}\r\n            onChange={this.handleChange}\r\n            placeholder='URL'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='ftp'\r\n            value={this.state.ftp}\r\n            onChange={this.handleChange}\r\n            placeholder='FTP'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"drop-downs\">\r\n            <div className=\"drop-down\">\r\n              <label>Registrar:</label>\r\n              <div className=\"drop-down-select\">\r\n                <select\r\n                  name='registrar'\r\n                  onChange={this.handleChange}\r\n                >\r\n                  {this.props.website.registrar ? \r\n                    <option value={this.props.website.registrar._id}>{this.props.website.registrar.name}</option>\r\n                  : <option value=''>----------None----------</option>\r\n                  }\r\n                  <option value=''>----------None----------</option>\r\n                  {registrars}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"drop-down\">\r\n              <label>Host:</label>\r\n              <div className=\"drop-down-select\">\r\n                <select\r\n                  name='host'\r\n                  onChange={this.handleChange}\r\n                >\r\n                  {this.props.website.host ? \r\n                    <option value={this.props.website.host._id}>{this.props.website.host.name}</option>\r\n                  : <option value=''>----------None----------</option>\r\n                  }\r\n                  <option value=''>----------None----------</option>\r\n                  {hosts}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Website</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditWebsiteForm;","import React, { Component } from 'react';\r\n\r\nclass CopyableText extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasFocus: false\r\n    };\r\n    this.textArea = React.createRef();\r\n  }\r\n\r\n  handleBlur = () => {\r\n    // The onBlur DOM event occurs when an object loses focus\r\n    this.setState({hasFocus: false});\r\n    this.textArea.current.value = this.props.value;\r\n  }\r\n\r\n  handleFocus = () => {\r\n    // The onFocus DOM event occurs when an object has focus\r\n    this.setState({hasFocus: true});\r\n  }\r\n\r\n  // Copies the input field's value to clipboard\r\n  copyToClipboard = (e) => {\r\n    this.textArea.current.select();\r\n    document.execCommand('copy');\r\n    e.target.focus();\r\n    this.textArea.current.value = 'Copied to Clipboard!';\r\n  }\r\n\r\n  render = () => {\r\n    return(\r\n      <input\r\n        ref={this.textArea}\r\n        //rows='1'\r\n        type='text'\r\n        value={this.props.value}\r\n        onClick={this.copyToClipboard}\r\n        onFocus={this.handleFocus}\r\n        onBlur={this.handleBlur}\r\n        readOnly\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\nexport default CopyableText;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditRegistrarForm extends Component {\r\n\r\n  state = {\r\n    registrarName: this.props.registrar.name,\r\n    userName: this.props.registrar.userName,\r\n    password: this.props.registrar.password,\r\n    notes: this.props.registrar.notes\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.registrarName) {\r\n      // Create updated registrar object\r\n      var updatedRegistrar = {...this.props.registrar};\r\n      updatedRegistrar.name = this.state.registrarName;\r\n      updatedRegistrar.userName = this.state.userName;\r\n      updatedRegistrar.password = this.state.password;\r\n      updatedRegistrar.notes = this.state.notes;\r\n\r\n      // Call updateRegistrar(), which is passed from RegistrarList as a prop\r\n      this.props.updateRegistrar(updatedRegistrar);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"registrarEditForm\">\r\n        <form id=\"registrarEditInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='registrarName'\r\n            value={this.state.registrarName}\r\n            onChange={this.handleChange}\r\n            placeholder='Registrar'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Registrar</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditRegistrarForm;","import React from 'react';\r\n\r\nconst BackButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"backButton\" className=\"fa fa-arrow-left fa-2x\"></i></div>\r\n)\r\n\r\nexport default BackButton;","import React from 'react';\r\nimport BackButton from './BackButton';\r\n\r\nconst Title = ({titleString, onBack}) => (\r\n  <div className = \"Title\">\r\n    <BackButton onClick={onBack}></BackButton>\r\n    <h2>{titleString}</h2>\r\n  </div>\r\n)\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\nimport Title from '../General/Title';\r\n\r\nclass RegistrarTitle extends Component {\r\n\r\n  render = () => {\r\n    if(!this.props.selectedWebsite) {\r\n      return(\r\n        <Title titleString={\"Registrar: \" + this.props.registrarName} onBack={this.props.goBack}/>\r\n      )\r\n    }\r\n    return(\r\n      <h3>{this.props.registrarName}</h3>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegistrarTitle;","import React, { Component } from 'react';\r\nimport EditRegistrarForm from './EditRegistrarForm';\r\nimport WebsiteList from '../Websites/WebsiteList';\r\nimport CopyableText from '../General/CopyableText';\r\nimport RegistrarTitle from './RegistrarTitle';\r\nimport Title from '../General/Title';\r\n\r\n// Display registrar info. Rendered from RegistrarList and WebsiteInfo.\r\nclass RegistrarInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewWebsites: false\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  // selectedWebsite is passed from WebsiteInfo as a prop\r\n  // websites is passed from RegistrarList as a prop\r\n  renderRegistrarInfo = () => {\r\n    return(\r\n      <div id=\"registrarInfoDisplay\">\r\n        <RegistrarTitle\r\n          selectedWebsite={this.props.selectedWebsite ? true : false}\r\n          registrarName={this.props.registrar.name}\r\n          goBack={this.props.goBack}\r\n        />\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.registrar.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.registrar.password}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.registrar.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        {\r\n          this.props.websites ?\r\n            <div id='registrarButtons'>\r\n              <button onClick={this.enableState.bind(this, 'enableViewWebsites', true)}>Registered Websites</button>\r\n              <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Registrar</button>\r\n              <button onClick={this.props.deleteRegistrar}>Delete Registrar</button>\r\n            </div>\r\n          : ''\r\n        }\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarEdit = () => {\r\n    return (\r\n      <div id=\"registrarEdit\">\r\n        <Title titleString=\"Edit Registrar\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditRegistrarForm \r\n          registrar={this.props.registrar} \r\n          updateRegistrar={this.props.updateRegistrar} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarWebsites = () => {\r\n    return (\r\n      <WebsiteList \r\n        goBack={this.enableState.bind(this, 'enableViewWebsites', false)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        selectedRegistrar={this.props.registrar}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderRegistrarEdit();\r\n    }\r\n    if(this.state.enableViewWebsites){\r\n      return this.renderRegistrarWebsites();\r\n    }\r\n    return this.renderRegistrarInfo();\r\n  }\r\n}\r\n\r\nexport default RegistrarInfo;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass EditHostForm extends Component {\r\n\r\n  state = {\r\n    hostName: this.props.host.name,\r\n    userName: this.props.host.userName,\r\n    password: this.props.host.password,\r\n    notes: this.props.host.notes\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    if(this.state.hostName) {\r\n      // Create updated host object\r\n      var updatedHost = {...this.props.host};\r\n      updatedHost.name = this.state.hostName;\r\n      updatedHost.userName = this.state.userName;\r\n      updatedHost.password = this.state.password;\r\n      updatedHost.notes = this.state.notes;\r\n\r\n      // Call updateHost(), which is passed from HostList as a prop\r\n      this.props.updateHost(updatedHost);\r\n      this.props.disableEditMode();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"hostEditForm\">\r\n        <form id=\"hostEditInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='hostName'\r\n            value={this.state.hostName}\r\n            onChange={this.handleChange}\r\n            placeholder='Host'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Update Host</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EditHostForm;","import React, { Component } from 'react';\r\nimport Title from '../General/Title';\r\n\r\nclass HostTitle extends Component {\r\n  render = () => {\r\n    if(!this.props.selectedWebsite) {\r\n      return(\r\n        <Title titleString={\"Host: \" + this.props.hostName} onBack={this.props.goBack}/>\r\n      )\r\n    }\r\n    return(\r\n      <h3>{this.props.hostName}</h3>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HostTitle;","import React, { Component } from 'react';\r\nimport EditHostForm from './EditHostForm';\r\nimport WebsiteList from '../Websites/WebsiteList';\r\nimport CopyableText from '../General/CopyableText';\r\nimport HostTitle from './HostTitle';\r\nimport Title from '../General/Title';\r\n\r\n// Display host info. Rendered from HostList and WebsiteInfo.\r\nclass HostInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewWebsites: false\r\n  };\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  // selectedWebsite is passed from WebsiteInfo as a prop\r\n  // websites is passed from HostList as a prop\r\n  renderHostInfo = () => {\r\n    return(\r\n      <div id=\"hostInfoDisplay\">\r\n        <HostTitle\r\n          selectedWebsite={this.props.selectedWebsite ? true : false}\r\n          hostName={this.props.host.name}\r\n          goBack={this.props.goBack}\r\n        />\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.host.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.host.password}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.host.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        {\r\n          this.props.websites ?\r\n            <div id='hostButtons'>\r\n              <button onClick={this.enableState.bind(this, 'enableViewWebsites', true)}>Hosted Websites</button>\r\n              <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Host</button>\r\n              <button onClick={this.props.deleteHost}>Delete Host</button>\r\n            </div>\r\n          : ''\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostEdit = () => {\r\n    return (\r\n      <div id=\"hostEdit\">\r\n        <Title titleString=\"Edit Host\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditHostForm \r\n          host={this.props.host} \r\n          updateHost={this.props.updateHost} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostWebsites = () => {\r\n    return (\r\n      <WebsiteList \r\n        goBack={this.enableState.bind(this, 'enableViewWebsites', false)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        selectedHost={this.props.host}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderHostEdit();\r\n    }\r\n    if(this.state.enableViewWebsites){\r\n      return this.renderHostWebsites();\r\n    }\r\n    return this.renderHostInfo();\r\n  }\r\n}\r\n\r\nexport default HostInfo;","import React, { Component } from 'react';\r\nimport EditWebsiteForm from './EditWebsiteForm';\r\nimport CopyableText from '../General/CopyableText';\r\nimport RegistrarInfo from '../Registrars/RegistrarInfo';\r\nimport HostInfo from '../Hosts/HostInfo';\r\nimport Title from '../General/Title';\r\n\r\nclass WebsiteInfo extends Component {\r\n\r\n  state = {\r\n    enableEditMode: false,\r\n    enableViewRegistrar: false,\r\n    enableViewHost: false\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n  }\r\n\r\n  renderWebsiteInfo = () => {\r\n    let titleString = \"Website: \" + this.props.website.name;\r\n    return (\r\n      <div id=\"websiteInfoDisplay\">\r\n        <Title  titleString={titleString} onBack={this.props.goBack} />\r\n        {this.props.website.registrar && this.props.website.registrar.name ? \r\n          <div className='list-item' onClick={this.enableState.bind(this, 'enableViewRegistrar', true)}>\r\n            <label>Registrar:</label><strong>{this.props.website.registrar.name}</strong>\r\n          </div>\r\n          : ''\r\n        }\r\n        {this.props.website.host && this.props.website.host.name ? \r\n          <div className='list-item' onClick={this.enableState.bind(this, 'enableViewHost', true)}>\r\n            <label>Host:</label><strong>{this.props.website.host.name}</strong>\r\n          </div>\r\n          : ''\r\n        }\r\n        <div className='list-item'><label>URL:</label><CopyableText value={this.props.website.url}/></div>\r\n        <div className='list-item'><label>Username:</label><CopyableText value={this.props.website.userName}/></div>\r\n        <div className='list-item'><label>Password:</label><CopyableText value={this.props.website.password}/></div>\r\n        <div className='list-item'><label>FTP:</label><CopyableText value={this.props.website.ftp}/></div>\r\n        <div className='list-item'><label>Notes:</label>\r\n          <textarea\r\n            rows='10'\r\n            name='notes'\r\n            value={this.props.website.notes}\r\n            placeholder='Notes...'\r\n            readOnly\r\n            disabled\r\n          />\r\n        </div>\r\n        <button onClick={this.enableState.bind(this, 'enableEditMode', true)}>Edit Website</button>\r\n        <button onClick={this.props.deleteWebsite}>Delete Website</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteEdit = () => {\r\n    return (\r\n      <div id=\"websiteEdit\">\r\n        <Title titleString=\"Edit Website\" onBack={this.enableState.bind(this, 'enableEditMode', false)}/>\r\n        <EditWebsiteForm \r\n          website={this.props.website} \r\n          updateWebsite={this.props.updateWebsite} \r\n          disableEditMode={this.enableState.bind(this, 'enableEditMode', false)}\r\n          registrars={this.props.registrars}\r\n          hosts={this.props.hosts}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarInfo = () => {\r\n    let titleString = this.props.website.name + \": Registrar\";\r\n    return (\r\n      <div id='websiteRegistrarInfo'>\r\n        <Title titleString={titleString} onBack={this.enableState.bind(this, 'enableViewRegistrar', false)}/>\r\n        <RegistrarInfo \r\n          registrar={this.props.website.registrar}\r\n          selectedWebsite={this.props.website}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostInfo = () => {\r\n    let titleString = this.props.website.name + \": Host\";\r\n    return (\r\n      <div id='websiteHostInfo'>\r\n        <Title titleString={titleString} onBack={this.enableState.bind(this, 'enableViewHost', false)}/>\r\n        <HostInfo \r\n          host={this.props.website.host}\r\n          selectedWebsite={this.props.website}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.enableEditMode){\r\n      return this.renderWebsiteEdit();\r\n    }\r\n    if(this.state.enableViewRegistrar){\r\n      return this.renderRegistrarInfo();\r\n    }\r\n    if(this.state.enableViewHost){\r\n      return this.renderHostInfo();\r\n    }\r\n    return this.renderWebsiteInfo();\r\n  }\r\n}\r\n\r\nexport default WebsiteInfo;","import React, {Component} from 'react';\r\nimport SelectRegistrarItem from './SelectRegistrarItem';\r\nimport SelectHostItem from './SelectHostItem';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddWebsiteForm extends Component {\r\n\r\n  state = {\r\n    websiteName: '',\r\n    url: '',\r\n    ftp: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: '',\r\n    registrar: this.props.selectedRegistrar,\r\n    host: this.props.selectedHost\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create website object\r\n    var website = {\r\n        name: this.state.websiteName,\r\n        url: this.state.url,\r\n        ftp: this.state.ftp,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    if(this.state.registrar) {\r\n      website.registrar = this.state.registrar;\r\n    }\r\n    if(this.state.host) {\r\n      website.host = this.state.host;\r\n    }\r\n    // Call addWebsite(), which is passed from WebsiteList as a prop\r\n    if(website.name && website.url) {\r\n      this.props.addWebsite(website);\r\n      this.props.disableAddWebsite();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const registrars = this.props.registrars.map((r) => (\r\n      <SelectRegistrarItem\r\n        key={r._id}\r\n        registrar={r}\r\n        id={r._id}\r\n      />\r\n    ));\r\n    const hosts = this.props.hosts.map((h) => (\r\n      <SelectHostItem\r\n        key={h._id}\r\n        host={h}\r\n        id={h._id}\r\n      />\r\n    ));\r\n    return (\r\n      <section id=\"websiteAddForm\">\r\n        <form id=\"websiteAddInput\">\r\n          <TextInput\r\n            name='websiteName'\r\n            value={this.state.websiteName}\r\n            onChange={this.handleChange}\r\n            placeholder='Website'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='url'\r\n            value={this.state.url}\r\n            onChange={this.handleChange}\r\n            placeholder='URL'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='ftp'\r\n            value={this.state.ftp}\r\n            onChange={this.handleChange}\r\n            placeholder='FTP'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          Registrar: {!this.props.selectedRegistrar ?\r\n            <select\r\n              name='registrar'\r\n              onChange={this.handleChange}\r\n            >\r\n              <option value=''>----------None----------</option>\r\n              {registrars}\r\n            </select>\r\n            : ''\r\n          }\r\n          Host: {!this.props.selectedHost ?\r\n            <select\r\n              name='host'\r\n              onChange={this.handleChange}\r\n            >\r\n              <option value=''>----------None----------</option>\r\n              {hosts}\r\n            </select>\r\n            : ''\r\n          }\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Website</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddWebsiteForm;","import React, {Component} from 'react';\r\n\r\nclass Search extends Component {\r\n\r\n  state = {\r\n    searchQuery: ''\r\n  };\r\n\r\n  handleChange = async(e) => {\r\n    // [e.target.name] is a computed property name\r\n    await this.setState({ [e.target.name]: e.target.value });\r\n    // Call search(), which is passed to this component as a prop\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n\r\n    // Call search(), which is passed to this component as a prop\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  clearSearch = async(e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n\r\n    await this.setState({searchQuery: ''});\r\n    this.props.search(this.state.searchQuery);\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"searchForm\">\r\n        <form id=\"searchInput\">\r\n          <input\r\n            type='text'\r\n            name='searchQuery'\r\n            value={this.state.searchQuery}\r\n            onChange={this.handleChange}\r\n            placeholder='Search'\r\n          />\r\n          <input type='submit' onClick={this.handleSubmit} style={{display: 'none'}}></input>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport WebsiteListItem from './WebsiteListItem';\r\nimport WebsiteInfo from './WebsiteInfo';\r\nimport AddWebsiteForm from './AddWebsiteForm';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass WebsiteList extends Component {\r\n\r\n  state = {\r\n    selectedWebsite: null,\r\n    enableAddWebsite: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchWebsites(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectWebsite = (website) => {\r\n    this.updateWebsite(website);\r\n    this.setState({selectedWebsite: website})\r\n    this.setState({enableAddWebsite: false});\r\n    this.searchWebsites(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectWebsite = () => {\r\n    this.setState({selectedWebsite: null});\r\n  }\r\n\r\n  addWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new website and update state\r\n      let newWebsite = await apiCalls.createWebsite(website);\r\n      this.props.updateWebsites([...this.props.websites, newWebsite]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  updateWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update website\r\n      let updatedSite = await apiCalls.updateWebsite(website);\r\n      // Find website in websites and replace it with updatedSite\r\n      const websites = this.props.websites.map(website => {\r\n        return (website._id === updatedSite._id ? updatedSite : website);\r\n      });\r\n      // Update state\r\n      this.setState({selectedWebsite: updatedSite});\r\n      this.props.updateWebsites(websites)\r\n    }\r\n  }\r\n\r\n  deleteWebsite = async(website) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedWebsite: null});\r\n      await apiCalls.removeWebsite(website._id);\r\n      const websites = this.props.websites.filter(w => w._id !== website._id);\r\n      this.props.updateWebsites(websites);\r\n    }\r\n  }\r\n\r\n  searchWebsites = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingSites = await apiCalls.searchWebsites(query);\r\n        this.props.updateWebsites(matchingSites);\r\n      } else {\r\n        let allSites = await apiCalls.getWebsites();\r\n        this.props.updateWebsites(allSites);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderWebsiteList = () => {\r\n    var websites;\r\n    var titleString = \"\";\r\n    if(this.props.selectedHost) titleString = this.props.selectedHost.name + \": Hosted Websites\";\r\n    if(this.props.selectedRegistrar) titleString = this.props.selectedRegistrar.name + \": Registered Websites\";\r\n    if(!this.props.selectedRegistrar && !this.props.selectedHost) titleString = \"All Websites\";\r\n\r\n    // If there is a selected host or registrar, only display websites for that host or registrar\r\n    // selectedHost and selectedRegistrar are passed as props from HostInfo and RegistrarInfo, respectively\r\n    if(this.props.selectedHost) {\r\n      websites = this.props.websites.filter(w => w.host && w.host._id === this.props.selectedHost._id);\r\n    }\r\n    else if(this.props.selectedRegistrar) {\r\n      websites = this.props.websites.filter(w => w.registrar && w.registrar._id === this.props.selectedRegistrar._id);\r\n    }\r\n    else {\r\n      websites = this.props.websites;\r\n    }\r\n    const websiteListItems = websites.map((w) => (\r\n      <WebsiteListItem\r\n        key={w._id}\r\n        {...w}\r\n        id={w._id}\r\n        onSelect={this.selectWebsite.bind(this, w)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"WebsiteList\">\r\n        <Title titleString={titleString} onBack = {this.props.goBack}/>\r\n        <Search search={this.searchWebsites}></Search>\r\n        <ul>\r\n          {websiteListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddWebsite', true)}>Add Website</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddWebsite = () => {\r\n    var titleString = 'New Website';\r\n    if(this.props.selectedHost) titleString = this.props.selectedHost.name + ': New Website';\r\n    if(this.props.selectedRegistrar) titleString = this.props.selectedRegistrar.name + ': New Website';\r\n\r\n    return (\r\n      <div id=\"websiteAddNew\">\r\n        <Title titleString = {titleString} onBack={this.enableState.bind(this, 'enableAddWebsite', false)}/>\r\n        <AddWebsiteForm \r\n          addWebsite={this.addWebsite} \r\n          disableAddWebsite={this.enableState.bind(this, 'enableAddWebsite', false)}\r\n          registrars={this.props.registrars}\r\n          hosts={this.props.hosts}\r\n          selectedHost={this.props.selectedHost}\r\n          selectedRegistrar={this.props.selectedRegistrar}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteInfo = () => {\r\n    return (\r\n      <WebsiteInfo \r\n        website={this.state.selectedWebsite} \r\n        goBack={this.deselectWebsite}\r\n        updateWebsite={this.updateWebsite}\r\n        deleteWebsite={this.deleteWebsite.bind(this, this.state.selectedWebsite)}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedWebsite !== null){\r\n      return this.renderWebsiteInfo();\r\n    }\r\n    if(this.state.enableAddWebsite){\r\n      return this.renderAddWebsite();\r\n    }\r\n    return this.renderWebsiteList();\r\n  }\r\n}\r\n\r\nexport default WebsiteList;","import React from 'react';\r\n\r\nconst RegistrarListItem = ({name, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n      <strong>{name}</strong>\r\n  </li>\r\n)\r\n\r\nexport default RegistrarListItem;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddRegistrarForm extends Component {\r\n\r\n  state = {\r\n    registrarName: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create registrar object\r\n    var registrar = {\r\n        name: this.state.registrarName,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    // Call addRegistrar(), which is passed from RegistrarList as a prop\r\n    if(registrar.name) {\r\n      this.props.addRegistrar(registrar);\r\n      this.props.disableAddRegistrar();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"registrarAddForm\">\r\n        <form id=\"registrarAddInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='registrarName'\r\n            value={this.state.registrarName}\r\n            onChange={this.handleChange}\r\n            placeholder='Registrar'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Registrar</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddRegistrarForm;","import React, { Component } from 'react'\r\nimport RegistrarListItem from './RegistrarListItem';\r\nimport AddRegistrarForm from './AddRegistrarForm';\r\nimport RegistrarInfo from './RegistrarInfo';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass RegistrarList extends Component {\r\n\r\n  state = {\r\n    selectedRegistrar: null,\r\n    enableAddRegistrar: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  addRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new registrar and update state\r\n      let newRegistrar = await apiCalls.createRegistrar(registrar);\r\n      this.props.updateRegistrars([...this.props.registrars, newRegistrar]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchRegistrars(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectRegistrar = (registrar) => {\r\n    this.setState({selectedRegistrar: registrar})\r\n    this.setState({enableAddRegistrar: false});\r\n    this.searchRegistrars(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectRegistrar = () => {\r\n    this.setState({selectedRegistrar: null});\r\n  }\r\n\r\n  updateRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update registrar\r\n      let updatedReg = await apiCalls.updateRegistrar(registrar);\r\n      // Find registrar in registrars and replace it with updatedReg\r\n      const registrars = this.props.registrars.map(registrar => {\r\n        return (registrar._id === updatedReg._id ? updatedReg : registrar);\r\n      });\r\n      // Update state\r\n      this.setState({selectedRegistrar: updatedReg});\r\n      this.props.updateRegistrars(registrars);\r\n    }\r\n  }\r\n\r\n  deleteRegistrar = async(registrar) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedRegistrar: null});\r\n      await apiCalls.removeRegistrar(registrar._id);\r\n      const registrars = this.props.registrars.filter(r => r._id !== registrar._id);\r\n      this.props.updateRegistrars(registrars);\r\n    }\r\n  }\r\n\r\n  searchRegistrars = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingRegistrars = await apiCalls.searchRegistrars(query);\r\n        this.props.updateRegistrars(matchingRegistrars);\r\n      } else {\r\n        let allRegistrars = await apiCalls.getRegistrars();\r\n        this.props.updateRegistrars(allRegistrars);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderRegistrarList = () => {\r\n    const registrarListItems = this.props.registrars.map((r) => (\r\n      <RegistrarListItem\r\n        key={r._id}\r\n        {...r}\r\n        id={r._id}\r\n        onSelect={this.selectRegistrar.bind(this, r)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"RegistrarList\">\r\n        <Title titleString=\"All Registrars\" onBack={this.props.goBack}/>\r\n        <Search search={this.searchRegistrars}></Search>\r\n        <ul>\r\n          {registrarListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddRegistrar', true)}>Add Registrar</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddRegistrar = () => {\r\n    return(\r\n      <div id=\"registrarAddNew\">\r\n        <Title titleString=\"New Registrar\" onBack={this.enableState.bind(this, 'enableAddRegistrar', false)}/>\r\n        <AddRegistrarForm \r\n          addRegistrar={this.addRegistrar} \r\n          disableAddRegistrar={this.enableState.bind(this, 'enableAddRegistrar', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarInfo = () => {\r\n    return (\r\n      <RegistrarInfo \r\n        registrar={this.state.selectedRegistrar} \r\n        goBack={this.deselectRegistrar}\r\n        updateRegistrar={this.updateRegistrar}\r\n        deleteRegistrar={this.deleteRegistrar.bind(this, this.state.selectedRegistrar)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedRegistrar !== null){\r\n      return this.renderRegistrarInfo();\r\n    }\r\n    if(this.state.enableAddRegistrar){\r\n      return this.renderAddRegistrar();\r\n    }\r\n    return this.renderRegistrarList();\r\n  }\r\n}\r\n\r\nexport default RegistrarList;","import React from 'react';\r\n\r\nconst HostListItem = ({name, onSelect}) => (\r\n  <li onClick={onSelect}>\r\n      <strong>{name}</strong>\r\n  </li>\r\n)\r\n\r\nexport default HostListItem;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass AddHostForm extends Component {\r\n\r\n  state = {\r\n    hostName: '',\r\n    userName: '',\r\n    password: '',\r\n    notes: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create host object\r\n    var host = {\r\n        name: this.state.hostName,\r\n        userName: this.state.userName,\r\n        password: this.state.password,\r\n        notes: this.state.notes\r\n    }\r\n    // Call addHost(), which is passed from HostList as a prop\r\n    if(host.name) {\r\n      this.props.addHost(host);\r\n      this.props.disableAddHost();\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"hostAddForm\">\r\n        <form id=\"hostAddInput\">\r\n          <TextInput\r\n            type='text'\r\n            name='hostName'\r\n            value={this.state.hostName}\r\n            onChange={this.handleChange}\r\n            placeholder='Host'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <TextInput\r\n            type='text'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <div className=\"noteInput\">\r\n            <label>Notes:</label>\r\n            <textarea\r\n              rows='10'\r\n              name='notes'\r\n              value={this.state.notes}\r\n              onChange={this.handleChange}\r\n              placeholder='Notes...'\r\n            />\r\n          </div>\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Add Host</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddHostForm;","import React, { Component } from 'react'\r\nimport HostListItem from './HostListItem';\r\nimport AddHostForm from './AddHostForm';\r\nimport HostInfo from './HostInfo';\r\nimport Search from '../General/Search';\r\nimport Title from '../General/Title';\r\n\r\nvar apiCalls = require('../Utils/api');\r\n\r\nclass HostList extends Component {\r\n\r\n  state = {\r\n    selectedHost: null,\r\n    enableAddHost: false\r\n  }\r\n\r\n  static defaultProps = {\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: []\r\n  };\r\n\r\n  addHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      // Create new host and update state\r\n      let newHost = await apiCalls.createHost(host);\r\n      this.props.updateHosts([...this.props.hosts, newHost]) // ... is the spread operator\r\n    }\r\n  }\r\n\r\n  enableState = (state, isEnabled) => {\r\n    this.setState({[state] : isEnabled}); // [state] is a computed property name\r\n    this.searchHosts(''); // Clear search results when changing view\r\n  }\r\n\r\n  selectHost = (host) => {\r\n    this.setState({selectedHost: host})\r\n    this.setState({enableAddHost: false});\r\n    this.searchHosts(''); // Clear search results when changing view\r\n  }\r\n\r\n  deselectHost = () => {\r\n    this.setState({selectedHost: null});\r\n  }\r\n\r\n  updateHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      // Update host\r\n      let updatedHost = await apiCalls.updateHost(host);\r\n      // Find host in hosts and replace it with updatedHost\r\n      const hosts = this.props.hosts.map(host => {\r\n        return (host._id === updatedHost._id ? updatedHost : host);\r\n      });\r\n      // Update state\r\n      this.setState({selectedHost: updatedHost});\r\n      this.props.updateHosts(hosts);\r\n    }\r\n  }\r\n\r\n  deleteHost = async(host) => {\r\n    if(this.props.checkLogin()) {\r\n      this.setState({selectedHost: null});\r\n      await apiCalls.removeHost(host._id);\r\n      const hosts = this.props.hosts.filter(r => r._id !== host._id);\r\n      this.props.updateHosts(hosts);\r\n    }\r\n  }\r\n\r\n  searchHosts = async(query) => {\r\n    if(this.props.checkLogin()) {\r\n      if(query !== '') {\r\n        let matchingHosts = await apiCalls.searchHosts(query);\r\n        this.props.updateHosts(matchingHosts);\r\n      } else {\r\n        let allHosts = await apiCalls.getHosts();\r\n        this.props.updateHosts(allHosts);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderHostList = () => {\r\n    const hostListItems = this.props.hosts.map((r) => (\r\n      <HostListItem\r\n        key={r._id}\r\n        {...r}\r\n        id={r._id}\r\n        onSelect={this.selectHost.bind(this, r)}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"HostList\">\r\n        <Title titleString=\"All Hosts\" onBack={this.props.goBack}/>\r\n        <Search search={this.searchHosts}></Search>\r\n        <ul>\r\n          {hostListItems}\r\n        </ul>\r\n        <button onClick={this.enableState.bind(this, 'enableAddHost', true)}>Add Host</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAddHost = () => {\r\n    return(\r\n      <div id=\"hostAddNew\">\r\n        <Title titleString=\"New Host\" onBack={this.enableState.bind(this, 'enableAddHost', false)}/>\r\n        <AddHostForm \r\n          addHost={this.addHost} \r\n          disableAddHost={this.enableState.bind(this, 'enableAddHost', false)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostInfo = () => {\r\n    return (\r\n      <HostInfo \r\n        host={this.state.selectedHost} \r\n        goBack={this.deselectHost}\r\n        updateHost={this.updateHost}\r\n        deleteHost={this.deleteHost.bind(this, this.state.selectedHost)}\r\n        websites={this.props.websites}\r\n        registrars={this.props.registrars}\r\n        hosts={this.props.hosts}\r\n        updateWebsites={this.props.updateWebsites}\r\n        checkLogin={this.props.checkLogin}\r\n      />\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.selectedHost !== null){\r\n      return this.renderHostInfo();\r\n    }\r\n    if(this.state.enableAddHost){\r\n      return this.renderAddHost();\r\n    }\r\n    return this.renderHostList();\r\n  }\r\n}\r\n\r\nexport default HostList;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass LoginForm extends Component {\r\n\r\n  state = {\r\n    userName: '',\r\n    password: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create user object\r\n    if(this.state.userName && this.state.password) {\r\n      var user = {\r\n        username: this.state.userName,\r\n        password: this.state.password\r\n      }\r\n      // login() is passed from App.js as a prop\r\n      this.props.login(user);\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"login\">\r\n        <form id=\"loginForm\">\r\n          <h3>Please Log In:</h3>\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Login</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm;","import React, {Component} from 'react';\r\nimport TextInput from '../General/TextInput';\r\n\r\nclass RegisterForm extends Component {\r\n\r\n  state = {\r\n    userName: '',\r\n    password: ''\r\n  };\r\n\r\n  // Called whenever the user presses a key in the input field\r\n  handleChange = (e) => {\r\n    // [e.target.name] is a computed property name\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); // Prevent form from reloading the page on submit\r\n    // Create user object\r\n    if(this.state.userName && this.state.password) {\r\n      var user = {\r\n        username: this.state.userName,\r\n        password: this.state.password\r\n      }\r\n      // registerUser() is passed from App.js as a prop\r\n      this.props.registerUser(user);\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <section id=\"register\">\r\n        <form id=\"registerForm\">\r\n          <h3>First Time Set Up:</h3>\r\n          <TextInput\r\n            type='text'\r\n            name='userName'\r\n            value={this.state.userName}\r\n            onChange={this.handleChange}\r\n            placeholder='Username'\r\n          />\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n            placeholder='Password'\r\n          />\r\n          <button \r\n            onClick={this.handleSubmit}\r\n          >Register</button>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RegisterForm;","import React from 'react';\r\n\r\nconst MaiHeader = () => (\r\n  <div className=\"MaiHeader\">\r\n    <h1>MAI</h1>\r\n    <h2><i className=\"fa fa-cloud\"></i> domain<span>manager</span></h2>\r\n  </div>\r\n)\r\n\r\nexport default MaiHeader;","import React from 'react';\r\n\r\nconst HomeButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"homeButton\" className=\"fa fa-home fa-2x\"></i></div>\r\n)\r\n\r\nexport default HomeButton;","import React from 'react';\r\n\r\nconst LogOutButton = ({onClick}) => (\r\n    <div onClick={onClick}><i id=\"logOutButton\" className=\"fa fa-sign-out fa-2x\"></i></div>\r\n)\r\n\r\nexport default LogOutButton;","import React, { Component } from 'react'\r\nimport WebsiteList from './Websites/WebsiteList';\r\nimport RegistrarList from './Registrars/RegistrarList';\r\nimport HostList from './Hosts/HostList';\r\nimport LoginForm from './General/LoginForm';\r\nimport RegisterForm from './General/RegisterForm';\r\nimport MaiHeader from './General/MaiHeader';\r\nimport './App.css';\r\nimport './assets/font-awesome/css/font-awesome.min.css';\r\nimport HomeButton from './General/HomeButton';\r\nimport LogOutButton from './General/LogOutButton';\r\n\r\nvar apiCalls = require('./Utils/api');\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    currentView: 'home',\r\n    websites: [],\r\n    registrars: [],\r\n    hosts: [],\r\n    loggedIn: false\r\n  }\r\n\r\n  componentWillMount = async() => {\r\n    await this.checkLogin(); // The user may already have a session and be logged in when the page loads\r\n    if(this.state.loggedIn) {\r\n      this.setView('home'); // If the user is logged in, skip the login step\r\n    } else if (await this.checkRegisteredUsers() === true){ // If a registered user exists, show the login form\r\n      this.setView('login');\r\n    } else {\r\n      // If there are no registered users, show the register form. There should only ever be one user,\r\n      // so this step is for first time set up only\r\n      this.setView('registerUser');\r\n    }\r\n  }\r\n\r\n  // Register a new user\r\n  registerUser = async(user) => {\r\n    let newUser = await apiCalls.registerUser(user);\r\n    if(newUser && newUser.username) {\r\n      this.setState({loggedIn: true});\r\n      this.setView('home');\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n    }\r\n  }\r\n\r\n  // Get the number of registered users. If there are no registered users, return false. Otherwise, return true\r\n  checkRegisteredUsers = async() => {\r\n    let registeredUsers = await apiCalls.checkRegisteredUsers();\r\n    if(registeredUsers && registeredUsers.count > 0) { return true; }\r\n    return false;\r\n  }\r\n\r\n  // Log in the provided user\r\n  login = async(user) => {\r\n    let foundUser = await apiCalls.login(user);\r\n    if(foundUser && foundUser.username) {\r\n      this.setState({loggedIn: true});\r\n      this.setView('home');\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n    }\r\n  }\r\n\r\n  // Check to see if the user is already logged in. If so, return true. Otherwise, return false.\r\n  checkLogin = async() => {\r\n    let foundUser = await apiCalls.checkLogin();\r\n    if(foundUser && foundUser.username) {\r\n      this.setState({loggedIn: true});\r\n      return true;\r\n    }\r\n    else {\r\n      this.setState({loggedIn: false});\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Log out the current user\r\n  logout = async() => {\r\n    apiCalls.logout();\r\n    this.setState({loggedIn: false});\r\n    this.setView('login');\r\n  }\r\n\r\n  // Get all websites\r\n  loadWebsites = async() => {\r\n    let websites = await apiCalls.getWebsites();\r\n    this.setState({websites});\r\n  }\r\n\r\n  // Get all registrars\r\n  loadRegistrars = async() => {\r\n    let registrars = await apiCalls.getRegistrars();\r\n    this.setState({registrars});\r\n  }\r\n\r\n  // Get all hosts\r\n  loadHosts = async() => {\r\n    let hosts = await apiCalls.getHosts();\r\n    this.setState({hosts});\r\n  }\r\n\r\n  // Check if user is logged in. If so, get data. Otherwise, display login form.\r\n  loadAll = async() => {\r\n    this.checkLogin();\r\n    if(this.state.loggedIn) {\r\n      this.loadWebsites();\r\n      this.loadRegistrars();\r\n      this.loadHosts();\r\n    }\r\n    else {\r\n      this.setView('login');\r\n    }\r\n  }\r\n\r\n  // Sets the current view\r\n  setView = async(view) => {\r\n    if(view === 'home') {\r\n      await this.loadAll();\r\n    }\r\n    this.setState({currentView : view});\r\n  }\r\n\r\n  // Update websites in state\r\n  updateWebsites = async(websites) => {\r\n    this.setState({websites: websites});\r\n  }\r\n\r\n  // Update registrars in state\r\n  updateRegistrars = (registrars) => {\r\n    this.setState({registrars: registrars});\r\n  }\r\n\r\n  // Update hosts in state\r\n  updateHosts = (hosts) => {\r\n    this.setState({hosts: hosts});\r\n  }\r\n\r\n  renderHomeView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <MaiHeader />\r\n        <button onClick={this.setView.bind(this, 'websites')}>Websites</button>\r\n        <button onClick={this.setView.bind(this, 'registrars')}>Registrars</button>\r\n        <button onClick={this.setView.bind(this, 'hosts')}>Hosts</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderLoginView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <MaiHeader />\r\n        <LoginForm login={this.login}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegisterUserView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <MaiHeader />\r\n        <RegisterForm registerUser={this.registerUser}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderWebsiteView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <WebsiteList\r\n          back={this.back}\r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderRegistrarView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <RegistrarList \r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateRegistrars={this.updateRegistrars}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderHostView = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Navbar\">\r\n          <HomeButton onClick={this.setView.bind(this, 'home')} />\r\n          <LogOutButton onClick={this.logout}/>\r\n        </div>\r\n        <HostList \r\n          goBack={this.setView.bind(this, 'home')}\r\n          websites={this.state.websites}\r\n          registrars={this.state.registrars}\r\n          hosts={this.state.hosts}\r\n          updateHosts={this.updateHosts}\r\n          updateWebsites={this.updateWebsites}\r\n          checkLogin={this.checkLogin}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    if(this.state.currentView === \"registerUser\") {\r\n      return this.renderRegisterUserView();\r\n    }\r\n    if(this.state.currentView === \"login\") {\r\n      return this.renderLoginView();\r\n    }\r\n    if(this.state.currentView === \"websites\") {\r\n      return this.renderWebsiteView();\r\n    }\r\n    if(this.state.currentView === \"registrars\") {\r\n      return this.renderRegistrarView();\r\n    }\r\n    if(this.state.currentView === \"hosts\") {\r\n      return this.renderHostView();\r\n    }\r\n    return this.renderHomeView();\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}